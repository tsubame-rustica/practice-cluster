<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jint</name>
    </assembly>
    <members>
        <member name="T:Jint.Agent">
            <summary>
            https://tc39.es/ecma262/#sec-agents , still a work in progress, mostly placeholder
            </summary>
        </member>
        <member name="M:Jint.AstExtensions.IsConstantDeclaration(Acornima.Ast.Declaration)">
            <summary>
            https://tc39.es/ecma262/#sec-static-semantics-isconstantdeclaration
            </summary>
        </member>
        <member name="M:Jint.AstExtensions.PrivateBoundIdentifiers(Acornima.Ast.Node,System.Collections.Generic.HashSet{Acornima.Ast.PrivateIdentifier})">
            <summary>
            https://tc39.es/ecma262/#sec-static-semantics-privateboundidentifiers
            </summary>
        </member>
        <member name="M:Jint.AstExtensions.DefineMethod``1(``0,Jint.Native.Object.ObjectInstance,Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-definemethod
            </summary>
        </member>
        <member name="M:Jint.AstExtensions.CreateLocationNode(Acornima.SourceLocation@)">
            <summary>
            Creates a dummy node that can be used when only location available and node is required.
            </summary>
        </member>
        <member name="M:Jint.AstExtensions.AllPrivateIdentifiersValid(Acornima.Ast.Script,Jint.Runtime.Realm,System.Collections.Generic.HashSet{Acornima.Ast.PrivateIdentifier})">
            <summary>
            https://tc39.es/ecma262/#sec-static-semantics-allprivateidentifiersvalid
            </summary>
        </member>
        <member name="T:Jint.Collections.DictionarySlim`2">
            <summary>
            DictionarySlim&lt;string, TValue> is similar to Dictionary&lt;TKey, TValue> but optimized in three ways:
            1) It allows access to the value by ref replacing the common TryGetValue and Add pattern.
            2) It does not store the hash code (assumes it is cheap to equate values).
            3) It does not accept an equality comparer (assumes Object.GetHashCode() and Object.Equals() or overridden implementation are cheap and sufficient).
            </summary>
        </member>
        <member name="M:Jint.Collections.DictionarySlim`2.Clear">
            <summary>
            Clears the dictionary. Note that this invalidates any active enumerators.
            </summary>
        </member>
        <member name="M:Jint.Collections.DictionarySlim`2.GetOrAddValueRef(`0)">
            <summary>
            Gets the value for the specified key, or, if the key is not present,
            adds an entry and returns the value by ref. This makes it possible to
            add or update a value in a single look up operation.
            </summary>
            <param name="key">Key to look for</param>
            <returns>Reference to the new or existing value</returns>
        </member>
        <member name="M:Jint.Collections.DictionarySlim`2.GetEnumerator">
            <summary>
            Gets an enumerator over the dictionary
            </summary>
        </member>
        <member name="M:Jint.Collections.DictionarySlim`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Gets an enumerator over the dictionary
            </summary>
        </member>
        <member name="M:Jint.Collections.DictionarySlim`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator over the dictionary
            </summary>
        </member>
        <member name="P:Jint.Collections.HybridDictionary`1.CheckExistingKeys">
            <summary>
            Optimization when no need to check for existing items.
            </summary>
        </member>
        <member name="T:Jint.Collections.ObjectTraverseStack">
            <summary>
            Helps traversing objects and checks for cyclic references.
            </summary>
        </member>
        <member name="T:Jint.Collections.RefStack`1">
            <summary>
            Stack for struct types.
            </summary>
        </member>
        <member name="T:Jint.Collections.StringDictionarySlim`1">
            <summary>
            DictionarySlim&lt;string, TValue> is similar to Dictionary&lt;TKey, TValue> but optimized in three ways:
            1) It allows access to the value by ref replacing the common TryGetValue and Add pattern.
            2) It does not store the hash code (assumes it is cheap to equate values).
            3) It does not accept an equality comparer (assumes Object.GetHashCode() and Object.Equals() or overridden implementation are cheap and sufficient).
            </summary>
        </member>
        <member name="M:Jint.Collections.StringDictionarySlim`1.Clear">
            <summary>
            Clears the dictionary. Note that this invalidates any active enumerators.
            </summary>
        </member>
        <member name="M:Jint.Collections.StringDictionarySlim`1.GetOrAddValueRef(Jint.Key)">
            <summary>
            Gets the value for the specified key, or, if the key is not present,
            adds an entry and returns the value by ref. This makes it possible to
            add or update a value in a single look up operation.
            </summary>
            <param name="key">Key to look for</param>
            <returns>Reference to the new or existing value</returns>
        </member>
        <member name="M:Jint.Collections.StringDictionarySlim`1.AddDangerous(Jint.Key@,`0)">
            <summary>
            Adds a new item and expects key to not to exist.
            </summary>
        </member>
        <member name="M:Jint.Collections.StringDictionarySlim`1.GetEnumerator">
            <summary>
            Gets an enumerator over the dictionary
            </summary>
        </member>
        <member name="M:Jint.Collections.StringDictionarySlim`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Jint#Key,TValue}}#GetEnumerator">
            <summary>
            Gets an enumerator over the dictionary
            </summary>
        </member>
        <member name="M:Jint.Collections.StringDictionarySlim`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator over the dictionary
            </summary>
        </member>
        <member name="P:Jint.Constraints.MaxStatementsConstraint.MaxStatements">
            <summary>
            The maximum configured amount of statements to allow during engine evaluation.
            </summary>
        </member>
        <member name="M:Jint.ConstraintsOptionsExtensions.MaxStatements(Jint.Options,System.Int32)">
            <summary>
            Limits the allowed statement count that can be run as part of the program.
            </summary>
        </member>
        <member name="M:Jint.ConstraintsOptionsExtensions.LimitMemory(Jint.Options,System.Int64)">
            <summary>
            Sets constraint based on memory usage in bytes.
            </summary>
        </member>
        <member name="M:Jint.ConstraintsOptionsExtensions.TimeoutInterval(Jint.Options,System.TimeSpan)">
            <summary>
            Sets constraint based on fixed time interval.
            </summary>
        </member>
        <member name="M:Jint.ConstraintsOptionsExtensions.CancellationToken(Jint.Options,System.Threading.CancellationToken)">
            <summary>
            Sets cancellation token to be observed. NOTE that this can be unreliable/imprecise on full framework due to timer logic.
            </summary>
        </member>
        <member name="T:Jint.Engine">
            <summary>
            Engine is the main API to JavaScript interpretation. Engine instances are not thread-safe.
            </summary>
        </member>
        <member name="P:Jint.Engine.AdvancedOperations.StackTrace">
            <summary>
            Gets current stack trace that is active in engine.
            </summary>
        </member>
        <member name="M:Jint.Engine.AdvancedOperations.ResetCallStack">
            <summary>
            Initializes list of references of called functions
            </summary>
        </member>
        <member name="M:Jint.Engine.AdvancedOperations.ProcessTasks">
            <summary>
            Forcefully processes the current task queues (micro and regular), this API may break and change behavior!
            </summary>
        </member>
        <member name="M:Jint.Engine.AdvancedOperations.RegisterPromise">
             <summary>
             EXPERIMENTAL! Subject to change.
            
             Registers a promise within the currently running EventLoop (has to be called within "ExecuteWithEventLoop" call).
             Note that ExecuteWithEventLoop will not trigger "onFinished" callback until ALL manual promises are settled.
            
             NOTE: that resolve and reject need to be called withing the same thread as "ExecuteWithEventLoop".
             The API assumes that the Engine is called from a single thread.
             </summary>
             <returns>a Promise instance and functions to either resolve or reject it</returns>
        </member>
        <member name="M:Jint.Engine.PrepareScript(System.String,System.String,System.Boolean,Jint.ScriptPreparationOptions)">
            <summary>
            Prepares a script for the engine that includes static analysis data to speed up execution during run-time.
            </summary>
            <remarks>
            Returned instance is reusable and thread-safe. You should prepare scripts only once and then reuse them.
            </remarks>
        </member>
        <member name="M:Jint.Engine.PrepareModule(System.String,System.String,Jint.ModulePreparationOptions)">
            <summary>
            Prepares a module for the engine that includes static analysis data to speed up execution during run-time.
            </summary>
            <remarks>
            Returned instance is reusable and thread-safe. You should prepare modules only once and then reuse them.
            </remarks>
        </member>
        <member name="M:Jint.Engine.ConstraintOperations.Check">
            <summary>
            Checks engine's active constraints. Propagates exceptions from constraints.
            </summary>
        </member>
        <member name="M:Jint.Engine.ConstraintOperations.Find``1">
            <summary>
            Return the first constraint that matches the predicate.
            </summary>
        </member>
        <member name="M:Jint.Engine.ConstraintOperations.Reset">
            <summary>
            Resets all execution constraints back to their initial state.
            </summary>
        </member>
        <member name="M:Jint.Engine.#ctor">
            <summary>
            Constructs a new engine instance.
            </summary>
        </member>
        <member name="M:Jint.Engine.#ctor(System.Action{Jint.Options})">
            <summary>
            Constructs a new engine instance and allows customizing options.
            </summary>
        </member>
        <member name="M:Jint.Engine.#ctor(Jint.Options)">
            <summary>
            Constructs a new engine with a custom <see cref="P:Jint.Engine.Options"/> instance.
            </summary>
        </member>
        <member name="M:Jint.Engine.#ctor(System.Action{Jint.Engine,Jint.Options})">
            <summary>
            Constructs a new engine instance and allows customizing options.
            </summary>
            <remarks>The provided engine instance in callback is not guaranteed to be fully configured</remarks>
        </member>
        <member name="P:Jint.Engine.Intrinsics">
            <summary>
            The well-known intrinsics for this engine instance.
            </summary>
        </member>
        <member name="P:Jint.Engine.Global">
            <summary>
            The global object for this engine instance.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.Delegate)">
            <summary>
            Registers a delegate with given name. Delegate becomes a JavaScript function that can be called.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.String)">
            <summary>
            Registers a string value as variable.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.Double)">
            <summary>
            Registers a double value as variable.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.Int32)">
            <summary>
            Registers an integer value as variable.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.Boolean)">
            <summary>
            Registers a boolean value as variable.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,Jint.Native.JsValue)">
            <summary>
            Registers a native JS value as variable.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.Object)">
            <summary>
            Registers an object value as variable, creates an interop wrapper when needed.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue(System.String,System.Type)">
            <summary>
            Registers an object value as variable, creates an interop wrapper when needed.
            </summary>
        </member>
        <member name="M:Jint.Engine.SetValue``1(System.String,``0)">
            <summary>
            Registers an object value as variable, creates an interop wrapper when needed.
            </summary>
        </member>
        <member name="M:Jint.Engine.ResetCallStack">
            <summary>
            Initializes list of references of called functions
            </summary>
        </member>
        <member name="M:Jint.Engine.Evaluate(System.String,System.String)">
            <summary>
            Evaluates code and returns last return value.
            </summary>
        </member>
        <member name="M:Jint.Engine.Evaluate(System.String,Jint.ScriptParsingOptions)">
            <summary>
            Evaluates code and returns last return value.
            </summary>
        </member>
        <member name="M:Jint.Engine.Evaluate(System.String,System.String,Jint.ScriptParsingOptions)">
            <summary>
            Evaluates code and returns last return value.
            </summary>
        </member>
        <member name="M:Jint.Engine.Evaluate(Jint.Prepared{Acornima.Ast.Script}@)">
            <summary>
            Evaluates code and returns last return value.
            </summary>
        </member>
        <member name="M:Jint.Engine.Execute(System.String,System.String)">
            <summary>
            Executes code into engine and returns the engine instance (useful for chaining).
            </summary>
        </member>
        <member name="M:Jint.Engine.Execute(System.String,Jint.ScriptParsingOptions)">
            <summary>
            Executes code into engine and returns the engine instance (useful for chaining).
            </summary>
        </member>
        <member name="M:Jint.Engine.Execute(System.String,System.String,Jint.ScriptParsingOptions)">
            <summary>
            Executes code into engine and returns the engine instance (useful for chaining).
            </summary>
        </member>
        <member name="M:Jint.Engine.Execute(Jint.Prepared{Acornima.Ast.Script}@)">
            <summary>
            Executes code into engine and returns the engine instance (useful for chaining).
            </summary>
        </member>
        <member name="M:Jint.Engine.ScriptEvaluation(Jint.Runtime.ScriptRecord,Acornima.ParserOptions)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation
            </summary>
        </member>
        <member name="M:Jint.Engine.RegisterPromise">
             <summary>
             EXPERIMENTAL! Subject to change.
            
             Registers a promise within the currently running EventLoop (has to be called within "ExecuteWithEventLoop" call).
             Note that ExecuteWithEventLoop will not trigger "onFinished" callback until ALL manual promises are settled.
            
             NOTE: that resolve and reject need to be called withing the same thread as "ExecuteWithEventLoop".
             The API assumes that the Engine is called from a single thread.
             </summary>
             <returns>a Promise instance and functions to either resolve or reject it</returns>
        </member>
        <member name="M:Jint.Engine.GetValue(Jint.Runtime.Reference,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-getvalue
            </summary>
        </member>
        <member name="M:Jint.Engine.PutValue(Jint.Runtime.Reference,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-putvalue
            </summary>
        </member>
        <member name="M:Jint.Engine.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="propertyName">The name of the function to call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Engine.Invoke(System.String,System.Object,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="propertyName">The name of the function to call.</param>
            <param name="thisObj">The this value inside the function call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Engine.Invoke(Jint.Native.JsValue,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="value">The function to call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Engine.Invoke(Jint.Native.JsValue,System.Object,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="value">The function to call.</param>
            <param name="thisObj">The this value inside the function call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Engine.Invoke(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-invoke
            </summary>
        </member>
        <member name="M:Jint.Engine.GetV(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-getv
            </summary>
        </member>
        <member name="M:Jint.Engine.GetValue(System.String)">
            <summary>
            Gets a named value from the Global scope.
            </summary>
            <param name="propertyName">The name of the property to return.</param>
        </member>
        <member name="M:Jint.Engine.GetLastSyntaxElement">
            <summary>
            Gets the last evaluated <see cref="T:Acornima.Ast.Node"/>.
            </summary>
        </member>
        <member name="M:Jint.Engine.GetValue(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            Gets a named value from the specified scope.
            </summary>
            <param name="scope">The scope to get the property from.</param>
            <param name="property">The name of the property to return.</param>
        </member>
        <member name="M:Jint.Engine.ResolveBinding(System.String,Jint.Runtime.Environments.Environment)">
            <summary>
            https://tc39.es/ecma262/#sec-resolvebinding
            </summary>
        </member>
        <member name="M:Jint.Engine.GetNewTarget(Jint.Runtime.Environments.Environment)">
            <summary>
            https://tc39.es/ecma262/#sec-getnewtarget
            </summary>
        </member>
        <member name="M:Jint.Engine.ResolveThisBinding">
            <summary>
            https://tc39.es/ecma262/#sec-resolvethisbinding
            </summary>
        </member>
        <member name="M:Jint.Engine.GlobalDeclarationInstantiation(Acornima.Ast.Script,Jint.Runtime.Environments.GlobalEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-globaldeclarationinstantiation
            </summary>
        </member>
        <member name="M:Jint.Engine.FunctionDeclarationInstantiation(Jint.Native.Function.Function,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-functiondeclarationinstantiation
            </summary>
        </member>
        <member name="M:Jint.Engine.EvalDeclarationInstantiation(Acornima.Ast.Script,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.PrivateEnvironment,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-evaldeclarationinstantiation
            </summary>
        </member>
        <member name="M:Jint.Engine.Call(System.String,Jint.Native.JsValue[])">
            <summary>
            Invokes the named callable and returns the resulting object.
            </summary>
            <param name="callableName">The name of the callable.</param>
            <param name="arguments">The arguments of the call.</param>
            <returns>The value returned by the call.</returns>
        </member>
        <member name="M:Jint.Engine.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            Invokes the callable and returns the resulting object.
            </summary>
            <param name="callable">The callable.</param>
            <param name="arguments">The arguments of the call.</param>
            <returns>The value returned by the call.</returns>
        </member>
        <member name="M:Jint.Engine.Call(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            Invokes the callable and returns the resulting object.
            </summary>
            <param name="callable">The callable.</param>
            <param name="thisObject">Value bound as this.</param>
            <param name="arguments">The arguments of the call.</param>
            <returns>The value returned by the call.</returns>
        </member>
        <member name="M:Jint.Engine.Construct(System.String,Jint.Native.JsValue[])">
            <summary>
            Calls the named constructor and returns the resulting object.
            </summary>
            <param name="constructorName">The name of the constructor to call.</param>
            <param name="arguments">The arguments of the constructor call.</param>
            <returns>The value returned by the constructor call.</returns>
        </member>
        <member name="M:Jint.Engine.Construct(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            Calls the constructor and returns the resulting object.
            </summary>
            <param name="constructor">The name of the constructor to call.</param>
            <param name="arguments">The arguments of the constructor call.</param>
            <returns>The value returned by the constructor call.</returns>
        </member>
        <member name="M:Jint.Engine.GetActiveScriptOrModule">
            <summary>
            https://tc39.es/ecma262/#sec-getactivescriptormodule
            </summary>
        </member>
        <member name="F:Jint.Extensions.Character.AsciiWordCharacters">
            <summary>
            https://tc39.es/ecma262/#ASCII-word-characters
            </summary>
        </member>
        <member name="F:Jint.Extensions.Hash.FnvOffsetBias">
            <summary>
            The offset bias value used in the FNV-1a algorithm
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
        </member>
        <member name="F:Jint.Extensions.Hash.FnvPrime">
            <summary>
            The generative factor used in the FNV-1a algorithm
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
        </member>
        <member name="M:Jint.Extensions.Hash.GetFNVHashCode(System.ReadOnlySpan{System.Char})">
            <summary>
            Compute the hashcode of a sub-string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            Note: FNV-1a was developed and tuned for 8-bit sequences. We're using it here
            for 16-bit Unicode chars on the understanding that the majority of chars will
            fit into 8-bits and, therefore, the algorithm will retain its desirable traits
            for generating hash codes.
            </summary>
        </member>
        <member name="M:Jint.Extensions.Hash.GetFNVHashCode(System.String)">
            <summary>
            Compute the hashcode of a string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="text">The input string</param>
            <returns>The FNV-1a hash code of <paramref name="text"/></returns>
        </member>
        <member name="M:Jint.Extensions.Hash.GetFNVHashCode(System.Text.StringBuilder)">
            <summary>
            Compute the hashcode of a string using FNV-1a
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="text">The input string</param>
            <returns>The FNV-1a hash code of <paramref name="text"/></returns>
        </member>
        <member name="M:Jint.Extensions.Hash.CombineFNVHash(System.Int32,System.String)">
            <summary>
            Combine a string with an existing FNV-1a hash code
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="hashCode">The accumulated hash code</param>
            <param name="text">The string to combine</param>
            <returns>The result of combining <paramref name="hashCode"/> with <paramref name="text"/> using the FNV-1a algorithm</returns>
        </member>
        <member name="M:Jint.Extensions.Hash.CombineFNVHash(System.Int32,System.ReadOnlySpan{System.Char})">
            <summary>
            Combine a string with an existing FNV-1a hash code
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="hashCode">The accumulated hash code</param>
            <param name="data">The string to combine</param>
            <returns>The result of combining <paramref name="hashCode"/> with <paramref name="data"/> using the FNV-1a algorithm</returns>
        </member>
        <member name="T:Jint.Extensions.WebEncoders">
            <summary>
            Contains utility APIs to assist with common encoding and decoding operations.
            </summary>
        </member>
        <member name="M:Jint.Extensions.WebEncoders.Base64UrlDecode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decodes a base64url-encoded string.
            </summary>
            <param name="input">The base64url-encoded input to decode.</param>
            <returns>The base64url-decoded form of the input.</returns>
            <remarks>
            The input must not contain any whitespace or padding characters.
            Throws <see cref="T:System.FormatException"/> if the input is malformed.
            </remarks>
        </member>
        <member name="M:Jint.Extensions.WebEncoders.Base64UrlDecode(System.ReadOnlySpan{System.Char},System.Char[])">
            <summary>
            Decodes a base64url-encoded <paramref name="input"/> into a <c>byte[]</c>.
            </summary>
        </member>
        <member name="M:Jint.Extensions.WebEncoders.Base64UrlEncode(System.Byte[],System.Boolean)">
            <summary>
            Encodes <paramref name="input"/> using base64url encoding.
            </summary>
            <param name="input">The binary input to encode.</param>
            <param name="omitPadding"></param>
            <returns>The base64url-encoded form of <paramref name="input"/>.</returns>
        </member>
        <member name="M:Jint.Extensions.WebEncoders.Base64UrlEncode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes <paramref name="input"/> using base64url encoding.
            </summary>
            <param name="input">The binary input to encode.</param>
            <param name="offset">The offset into <paramref name="input"/> at which to begin encoding.</param>
            <param name="count">The number of bytes from <paramref name="input"/> to encode.</param>
            <param name="omitPadding"></param>
            <returns>The base64url-encoded form of <paramref name="input"/>.</returns>
        </member>
        <member name="M:Jint.Extensions.WebEncoders.Base64UrlEncode(System.Byte[],System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes <paramref name="input"/> using base64url encoding.
            </summary>
            <param name="input">The binary input to encode.</param>
            <param name="offset">The offset into <paramref name="input"/> at which to begin encoding.</param>
            <param name="output">
            Buffer to receive the base64url-encoded form of <paramref name="input"/>. Array must be large enough to
            hold <paramref name="outputOffset"/> characters and the full base64-encoded form of
            <paramref name="input"/>, including padding characters.
            </param>
            <param name="outputOffset">
            The offset into <paramref name="output"/> at which to begin writing the base64url-encoded form of
            <paramref name="input"/>.
            </param>
            <param name="count">The number of <c>byte</c>s from <paramref name="input"/> to encode.</param>
            <param name="omitPadding"></param>
            <returns>
            The number of characters written to <paramref name="output"/>, less any padding characters.
            </returns>
        </member>
        <member name="M:Jint.Extensions.WebEncoders.GetArraySizeRequiredToEncode(System.Int32)">
            <summary>
            Get the minimum output <c>char[]</c> size required for encoding <paramref name="count"/>
            <see cref="T:System.Byte"/>s with the <see cref="M:Jint.Extensions.WebEncoders.Base64UrlEncode(System.Byte[],System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean)"/> method.
            </summary>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The minimum output <c>char[]</c> size required for encoding <paramref name="count"/> <see cref="T:System.Byte"/>s.
            </returns>
        </member>
        <member name="T:Jint.Constraint">
            <summary>
            A constraint that engine can check for validate during statement execution.
            </summary>
        </member>
        <member name="M:Jint.Constraint.Check">
            <summary>
            Called before each statement to check if your requirements are met; if not - throws an exception.
            </summary>
        </member>
        <member name="M:Jint.Constraint.Reset">
            <summary>
            Called before script is run. Useful when you use an engine object for multiple executions.
            </summary>
        </member>
        <member name="T:Jint.JintException">
            <summary>
            Base class for exceptions thrown by Jint.
            </summary>
        </member>
        <member name="M:Jint.JsValueExtensions.UnwrapIfPromise(Jint.Native.JsValue)">
            <summary>
            If the value is a Promise
                1. If "Fulfilled" returns the value it was fulfilled with
                2. If "Rejected" throws "PromiseRejectedException" with the rejection reason
                3. If "Pending" throws "InvalidOperationException". Should be called only in "Settled" state
            Else
                returns the value intact
            </summary>
            <param name="value">value to unwrap</param>
            <returns>inner value if Promise the value itself otherwise</returns>
        </member>
        <member name="M:Jint.JsValueExtensions.GetArrayBufferMaxByteLengthOption(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-getarraybuffermaxbytelengthoption
            </summary>
        </member>
        <member name="T:Jint.Key">
            <summary>
            Represents a key that Jint uses with pre-calculated hash code
            as runtime does a lot of repetitive dictionary lookups.
            </summary>
        </member>
        <member name="T:Jint.Native.AggregateError.AggregateErrorConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-aggregate-error-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.AggregateError.AggregateErrorConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-nativeerror
            </summary>
        </member>
        <member name="T:Jint.Native.AggregateError.AggregateErrorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-aggregate-error-prototype-objects
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayConstructor.From(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.from
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayConstructor.ArrayCreate(System.UInt64,Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/ecma262/#sec-arraycreate
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayConstructor.ArraySpeciesCreate(Jint.Native.Object.ObjectInstance,System.UInt64)">
            <summary>
            https://tc39.es/ecma262/#sec-arrayspeciescreate
            </summary>
        </member>
        <member name="P:Jint.Native.Array.ArrayInstance.CanUseFastAccess">
            <summary>
            Checks whether there have been changes to object prototype chain which could render fast access patterns impossible.
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayInstance.GetEntries(System.Boolean)">
            <summary>
            Returns key and value pairs for actual array entries, excludes parent and optionally length.
            </summary>
            <param name="includeLength">Whether to return length and it's value.</param>
        </member>
        <member name="M:Jint.Native.Array.ArrayInstance.Push(Jint.Native.JsValue)">
            <summary>
            Pushes the value to the end of the array instance.
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayInstance.Push(Jint.Native.JsValue[])">
            <summary>
            Pushes the given values to the end of the array.
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayInstance.FindWithCallback(Jint.Native.JsValue[],System.UInt64@,Jint.Native.JsValue@,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Jint.Native.Array.ArrayInstance.CopyValues(Jint.Native.JsArray,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Fast path for concatenating sane-sized arrays, we assume size has been calculated.
            </summary>
        </member>
        <member name="T:Jint.Native.Array.ArrayIteratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object
            </summary>
        </member>
        <member name="T:Jint.Native.Array.ArrayOperations`1">
            <summary>
                Adapter to use optimized array operations when possible.
                Gaps the difference between ArgumentsInstance and ArrayInstance.
            </summary>
        </member>
        <member name="T:Jint.Native.Array.ArrayPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Fill(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.fill
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.CopyWithin(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.copywithin
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.LastIndexOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.lastindexof
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Reduce(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.reduce
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Filter(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.filter
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Map(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.map
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Flat(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.flat
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.FlatMap(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.flatmap
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.FlattenIntoArray(Jint.Native.Object.ObjectInstance,Jint.Native.Array.ArrayOperations,System.UInt32,System.UInt64,System.Double,Jint.Native.ICallable,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-flattenintoarray
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Includes(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.includes
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Every(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.every
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.IndexOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.indexof
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Find(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.find
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.FindIndex(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.findindex
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.At(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-relative-indexing-method/#sec-array-prototype-additions
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Splice(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.splice
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Unshift(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            /https://tc39.es/ecma262/#sec-array.prototype.unshift
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Sort(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.sort
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Slice(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.slice
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Reverse(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.reverse
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Join(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.join
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.ToLocaleString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.tolocalestring
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Concat(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.concat
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.ReduceRight(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.reduceright
            </summary>
        </member>
        <member name="M:Jint.Native.Array.ArrayPrototype.Push(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-array.prototype.push
            </summary>
        </member>
        <member name="F:Jint.Native.Array.ArrayPrototype.ArrayComparer.Default">
            <summary>
            Default instance without any compare function.
            </summary>
        </member>
        <member name="T:Jint.Native.ArrayBuffer.ArrayBufferConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferConstructor.Construct(System.Byte[])">
            <summary>
            Constructs a new JsArrayBuffer instance and takes ownership of the given byte array and uses it as backing store.
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferConstructor.Construct(System.UInt64,System.Nullable{System.UInt32})">
            <summary>
            Constructs a new JsArrayBuffer with given byte length and optional max byte length.
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferConstructor.Species(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-arraybuffer-@@species
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferConstructor.IsView(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-arraybuffer.isview
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferConstructor.AllocateArrayBuffer(Jint.Native.JsValue,System.UInt64,System.Nullable{System.UInt32})">
            <summary>
            https://tc39.es/ecma262/#sec-allocatearraybuffer
            </summary>
        </member>
        <member name="T:Jint.Native.ArrayBuffer.ArrayBufferPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.MaxByteLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-arraybuffer.prototype.maxbytelength
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.Resizable(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-arraybuffer.prototype.resizable
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.Resize(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-arraybuffer.prototype.resize
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.ByteLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-arraybuffer.prototype.bytelength
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.Slice(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.Transfer(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-arraybuffer-transfer/#sec-arraybuffer.prototype.transfer
            </summary>
        </member>
        <member name="M:Jint.Native.ArrayBuffer.ArrayBufferPrototype.TransferToFixedLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-arraybuffer-transfer/#sec-arraybuffer.prototype.transfertofixedlength
            </summary>
        </member>
        <member name="T:Jint.Native.AsyncFunction.AsyncFunctionConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-async-function-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.AsyncFunction.AsyncFunctionPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-async-function-prototype-properties
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.AsyncGeneratorFunctionConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.AsyncGeneratorFunctionPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-asyncgeneratorfunction-prototype
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.AsyncGeneratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-asyncgenerator-objects
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.AsyncGeneratorPrototype.Next(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-generator.prototype.next
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.AsyncGeneratorPrototype.Return(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-generator.prototype.return
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.AsyncGeneratorPrototype.Throw(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-generator.prototype.throw
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.GeneratorFunctionConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-generatorfunction-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.GeneratorFunctionPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.GeneratorInstance">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-generator-instances
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.GeneratorInstance.GeneratorStart(Jint.Runtime.Interpreter.JintStatementList)">
            <summary>
            https://tc39.es/ecma262/#sec-generatorstart
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.GeneratorInstance.GeneratorResume(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-generatorresume
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.GeneratorInstance.GeneratorResumeAbrupt(Jint.Runtime.Completion@,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-generatorresumeabrupt
            </summary>
        </member>
        <member name="T:Jint.Native.Generator.GeneratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-generator-objects
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.GeneratorPrototype.Next(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-generator.prototype.next
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.GeneratorPrototype.Return(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-generator.prototype.return
            </summary>
        </member>
        <member name="M:Jint.Native.Generator.GeneratorPrototype.Throw(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-generator.prototype.throw
            </summary>
        </member>
        <member name="T:Jint.Native.Atomics.AtomicsInstance">
            <summary>
            https://tc39.es/ecma262/#sec-atomics-object
            </summary>
        </member>
        <member name="T:Jint.Native.BigInt.BigIntConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-bigint-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntConstructor.AsIntN(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-bigint.asintn
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntConstructor.AsUintN(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-bigint.asuintn
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntConstructor.NumberToBigInt(Jint.Native.JsNumber)">
            <summary>
            https://tc39.es/ecma262/#sec-numbertobigint
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-bigint-constructor-number-value
            </summary>
        </member>
        <member name="T:Jint.Native.BigInt.BigIntPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-bigint-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntPrototype.ToLocaleString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma402/#sup-bigint.prototype.tolocalestring
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntPrototype.ValueOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-bigint.prototype.valueof
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntPrototype.ToBigIntString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-bigint.prototype.tostring
            </summary>
        </member>
        <member name="M:Jint.Native.BigInt.BigIntPrototype.ThisBigIntValue(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#thisbigintvalue
            </summary>
        </member>
        <member name="M:Jint.Native.Boolean.BooleanConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-boolean-constructor-boolean-value
            </summary>
        </member>
        <member name="T:Jint.Native.Boolean.BooleanPrototype">
            <summary>
                http://www.ecma-international.org/ecma-262/5.1/#sec-15.6.4
            </summary>
        </member>
        <member name="T:Jint.Native.DataView.DataViewConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-dataview-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.DataView.DataViewPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-dataview-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.DataView.DataViewPrototype.Buffer(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-dataview.prototype.buffer
            </summary>
        </member>
        <member name="M:Jint.Native.DataView.DataViewPrototype.ByteLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-dataview.prototype.bytelength
            </summary>
        </member>
        <member name="M:Jint.Native.DataView.DataViewPrototype.ByteOffset(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-dataview.prototype.byteoffset
            </summary>
        </member>
        <member name="M:Jint.Native.DataView.DataViewPrototype.GetViewValue(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.TypedArray.TypedArrayElementType)">
            <summary>
            https://tc39.es/ecma262/#sec-getviewvalue
            </summary>
        </member>
        <member name="P:Jint.Native.DataView.DataViewPrototype.DataViewWithBufferWitnessRecord.IsViewOutOfBounds">
            <summary>
            https://tc39.es/ecma262/#sec-isviewoutofbounds
            </summary>
        </member>
        <member name="P:Jint.Native.DataView.DataViewPrototype.DataViewWithBufferWitnessRecord.ViewByteLength">
            <summary>
            https://tc39.es/ecma262/#sec-getviewbytelength
            </summary>
        </member>
        <member name="M:Jint.Native.DataView.DataViewPrototype.MakeDataViewWithBufferWitnessRecord(Jint.Native.JsDataView,Jint.Native.ArrayBuffer.ArrayBufferOrder)">
            <summary>
            https://tc39.es/ecma262/#sec-makedataviewwithbufferwitnessrecord
            </summary>
        </member>
        <member name="M:Jint.Native.DataView.DataViewPrototype.SetViewValue(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.TypedArray.TypedArrayElementType,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-setviewvalue
            </summary>
        </member>
        <member name="T:Jint.Native.Date.DateConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-date-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DateConstructor.Parse(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.parse
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DateConstructor.ParseFromString(System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-date.parse
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DateConstructor.Utc(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.utc
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DateConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-date
            </summary>
        </member>
        <member name="T:Jint.Native.Date.DatePrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-date-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToPrimitive(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ThisTimeValue(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#thistimevalue
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.tostring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToDateString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.todatestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToDateString(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#sec-todatestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToTimeString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.totimestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToLocaleString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.tolocalestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToLocaleDateString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.tolocaledatestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToLocaleTimeString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.tolocaletimestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.GetUTCMonth(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.getutcmonth
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.GetDate(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.getdate
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetTime(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.settime
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetMilliseconds(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setmilliseconds
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCMilliseconds(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutcmilliseconds
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetSeconds(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setseconds
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCSeconds(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutcseconds
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetMinutes(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setminutes
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCMinutes(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutcminutes
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetHours(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.sethours
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCHours(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutchours
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetDate(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setdate
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCDate(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutcdate
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetMonth(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setmonth
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCMonth(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutcmonth
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetFullYear(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setfullyear
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetYear(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setyear
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.SetUTCFullYear(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.setutcfullyear
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToUtcString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.toutcstring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.ToISOString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-date.prototype.toisostring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.Day(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#eqn-Day
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.TimeWithinDay(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#eqn-Day
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.DaysInYear(System.Double)">
            <summary>
            The number of days in a year
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.DayFromYear(Jint.Native.DatePresentation)">
            <summary>
            The day number of the first day of the year.
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.TimeFromYear(Jint.Native.DatePresentation)">
            <summary>
            The time value of the start of the year
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.YearFromTime(Jint.Native.DatePresentation)">
            <summary>
            The year of a time value.
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.InLeapYear(Jint.Native.DatePresentation)">
            <summary>
            <value>true</value> if the time is within a leap year, <value>false</value> otherwise
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.MonthFromTime(Jint.Native.DatePresentation)">
            <summary>
            The month number of a time value.
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.WeekDay(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#sec-week-day
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.LocalTime(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#sec-localtime
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.DateString(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#sec-datestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.TimeString(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#sec-timestring
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.TimeZoneString(Jint.Native.DatePresentation)">
            <summary>
            https://tc39.es/ecma262/#sec-timezoneestring
            </summary>
        </member>
        <member name="T:Jint.Native.Date.DateUtils">
            <summary>
            Utility methods to parse and format rfc822 date strings.
            </summary>
            <remarks>
            Utility methods to parse and format rfc822 date strings.
            </remarks>
        </member>
        <member name="M:Jint.Native.Date.DateUtils.TryParse(System.Byte[],System.Int32,System.Int32,System.DateTimeOffset@)">
            <summary>
            Try to parse the given input buffer into a new <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <remarks>
            Parses an rfc822 date and time from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
            <returns><c>true</c>, if the date was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="buffer">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">The number of bytes in the input buffer to parse.</param>
            <param name="date">The parsed date.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify
            a valid range in the byte array.
            </exception>
        </member>
        <member name="M:Jint.Native.Date.DateUtils.TryParse(System.String,System.DateTimeOffset@)">
            <summary>
            Try to parse the given input buffer into a new <see cref="T:System.DateTimeOffset"/> instance.
            </summary>
            <remarks>
            Parses an rfc822 date and time from the specified text.
            </remarks>
            <returns><c>true</c>, if the date was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The input text.</param>
            <param name="date">The parsed date.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Jint.Native.Error.ErrorConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-nativeerror
            </summary>
        </member>
        <member name="M:Jint.Native.Error.ErrorInstance.InstallErrorCause(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-installerrorcause
            </summary>
        </member>
        <member name="T:Jint.Native.Error.ErrorPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.4
            </summary>
        </member>
        <member name="T:Jint.Native.FinalizationRegistry.FinalizationRegistryConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-finalization-registry-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.FinalizationRegistry.FinalizationRegistryPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-finalization-registry-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.FinalizationRegistry.FinalizationRegistryPrototype.Register(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-finalization-registry.prototype.register
            </summary>
        </member>
        <member name="M:Jint.Native.FinalizationRegistry.FinalizationRegistryPrototype.Unregister(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-finalization-registry.prototype.unregister
            </summary>
        </member>
        <member name="T:Jint.Native.Function.BindFunction">
            <summary>
            https://tc39.es/ecma262/#sec-bound-function-exotic-objects
            </summary>
        </member>
        <member name="P:Jint.Native.Function.BindFunction.BoundTargetFunction">
            <summary>
            The wrapped function object.
            </summary>
        </member>
        <member name="P:Jint.Native.Function.BindFunction.BoundThis">
            <summary>
            The value that is always passed as the this value when calling the wrapped function.
            </summary>
        </member>
        <member name="P:Jint.Native.Function.BindFunction.BoundArguments">
            <summary>
            A list of values whose elements are used as the first arguments to any call to the wrapped function.
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ClassDefinition.BuildConstructor(Jint.Runtime.Interpreter.EvaluationContext,Jint.Runtime.Environments.Environment)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-classdefinitionevaluation
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ClassDefinition.ClassElementEvaluation(Jint.Engine,Jint.Native.Object.ObjectInstance,Acornima.Ast.IClassElement)">
            <summary>
            https://tc39.es/ecma262/#sec-static-semantics-classelementevaluation
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ClassDefinition.ClassFieldDefinitionEvaluation(Jint.Engine,Jint.Native.Object.ObjectInstance,Acornima.Ast.PropertyDefinition)">
            <summary>
            /https://tc39.es/ecma262/#sec-runtime-semantics-classfielddefinitionevaluation
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ClassDefinition.ClassStaticBlockDefinitionEvaluation(Jint.Engine,Jint.Native.Object.ObjectInstance,Acornima.Ast.StaticBlock)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-classstaticblockdefinitionevaluation
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ClassDefinition.MethodDefinitionEvaluation``1(Jint.Engine,Jint.Native.Object.ObjectInstance,``0,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-methoddefinitionevaluation
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ClassDefinition.DefineMethodProperty(Jint.Native.Object.ObjectInstance,Jint.Native.JsValue,Jint.Native.Function.ScriptFunction,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-definemethodproperty
            </summary>
        </member>
        <member name="M:Jint.Native.Function.EvalFunction.PerformEval(Jint.Native.JsValue,Jint.Runtime.Realm,System.Boolean,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-performeval
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            Executed when a function object is used as a function
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.SetFunctionName(Jint.Native.JsValue,System.String,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-setfunctionname
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.OrdinaryCreateFromConstructor``2(Jint.Native.JsValue,System.Func{Jint.Runtime.Intrinsics,Jint.Native.Object.ObjectInstance},System.Func{Jint.Engine,Jint.Runtime.Realm,``1,``0},``1)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor
            </summary>
            <remarks>
            Uses separate builder to get correct type with state support to prevent allocations.
            In spec intrinsicDefaultProto is string pointing to intrinsic, but we do a selector.
            </remarks>
        </member>
        <member name="M:Jint.Native.Function.Function.GetPrototypeFromConstructor(Jint.Native.JsValue,System.Func{Jint.Runtime.Intrinsics,Jint.Native.Object.ObjectInstance})">
            <summary>
            https://tc39.es/ecma262/#sec-getprototypefromconstructor
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.GetFunctionRealm(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-getfunctionrealm
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.MakeMethod(Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/ecma262/#sec-makemethod
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.OrdinaryCallBindThis(Jint.Runtime.Environments.ExecutionContext@,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinarycallbindthis
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.PrepareForOrdinaryCall(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-prepareforordinarycall
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.CreateDynamicFunction(Jint.Native.Object.ObjectInstance,Jint.Native.JsValue,Jint.Native.Function.FunctionKind,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-createdynamicfunction
            </summary>
        </member>
        <member name="M:Jint.Native.Function.Function.OrdinaryFunctionCreate(Jint.Native.Object.ObjectInstance,Jint.Runtime.Interpreter.JintFunctionDefinition,Jint.Native.Function.FunctionThisMode,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.PrivateEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinaryfunctioncreate
            </summary>
        </member>
        <member name="T:Jint.Native.Function.FunctionConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-function-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionConstructor.InstantiateFunctionObject(Jint.Runtime.Interpreter.JintFunctionDefinition,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.PrivateEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiatefunctionobject
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionConstructor.InstantiateAsyncFunctionObject(Jint.Runtime.Interpreter.JintFunctionDefinition,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.PrivateEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncfunctionobject
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionConstructor.InstantiateOrdinaryFunctionObject(Jint.Runtime.Interpreter.JintFunctionDefinition,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.PrivateEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiateordinaryfunctionobject
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionConstructor.InstantiateGeneratorFunctionObject(Jint.Runtime.Interpreter.JintFunctionDefinition,Jint.Runtime.Environments.Environment,Jint.Runtime.Environments.PrivateEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiategeneratorfunctionobject
            </summary>
        </member>
        <member name="T:Jint.Native.Function.FunctionPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.HasInstance(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.Bind(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-function.prototype.bind
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.BoundFunctionCreate(Jint.Native.Object.ObjectInstance,Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-boundfunctioncreate
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.ToString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-function.prototype.tostring
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.Apply(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-function.prototype.apply
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.CreateListFromArrayLike(Jint.Runtime.Realm,Jint.Native.JsValue,System.Nullable{Jint.Runtime.Types})">
            <summary>
            https://tc39.es/ecma262/#sec-createlistfromarraylike
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionPrototype.CallImpl(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-function.prototype.call
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ScriptFunction.#ctor(Jint.Engine,Acornima.Ast.IFunction,System.Boolean,Jint.Native.Object.ObjectInstance)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ScriptFunction.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ScriptFunction.Jint#Native#IConstructor#Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.ParseInt(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-parseint-string-radix
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.ParseFloat(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-parsefloat-string
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.IsNaN(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.4
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.IsFinite(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.5
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.EncodeUri(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-encodeuri-uri
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.EncodeUriComponent(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.Escape(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-escape-string
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.Unescape(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.2
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.CollatorConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-the-intl-collator-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.CollatorPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-the-intl-collator-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.DateTimeFormatConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-datetimeformat-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.DateTimeFormatConstructor.InitializeDateTimeFormat(Jint.Native.JsObject,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-initializedatetimeformat
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.DateTimeFormatPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-datetimeformat-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.DisplayNamesConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-displaynames-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.DisplayNamesPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-displaynames-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.IntlInstance">
            <summary>
            https://tc39.es/ecma402/#intl-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.ListFormatConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-listformat-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.ListFormatPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-listformat-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.LocaleConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-locale-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.LocalePrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-locale-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.NumberFormatConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-numberformat-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-intl.numberformat
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.InitializeNumberFormat(Jint.Native.JsObject,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-initializenumberformat
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.ResolveLocale(System.Object,Jint.Native.JsArray,Jint.Native.JsObject,System.Object,System.Object)">
            <summary>
            https://tc39.es/ecma402/#sec-resolvelocale
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.SetNumberFormatDigitOptions(Jint.Native.JsObject,Jint.Native.Object.ObjectInstance,System.Int32,System.Int32,System.String)">
            <summary>
            https://tc39.es/ecma402/#sec-setnfdigitoptions
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.CurrencyDigits(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-currencydigits
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.SetNumberFormatUnitOptions(Jint.Native.JsObject,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-setnumberformatunitoptions
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.IsWellFormedUnitIdentifier(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-iswellformedunitidentifier
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.IsSanctionedSingleUnitIdentifier(System.String)">
            <summary>
            https://tc39.es/ecma402/#sec-issanctionedsingleunitidentifier
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.IsWellFormedCurrencyCode(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-iswellformedcurrencycode
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.CoerceOptionsToObject(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-coerceoptionstoobject
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.CanonicalizeLocaleList(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-canonicalizelocalelist
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.NumberFormatConstructor.GetOption``1(Jint.Native.JsValue,System.String,Jint.Native.Intl.NumberFormatConstructor.OptionType,``0[],``0)">
            <summary>
            https://tc39.es/ecma402/#sec-getoption
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.NumberFormatPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-numberformat-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.PluralRulesConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-pluralrules-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.PluralRulesConstructor.InitializePluralRules(Jint.Native.JsObject,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-initializepluralrules
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.PluralRulesPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-pluralrules-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.RelativeTimeFormatConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-relativetimeformat-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Intl.RelativeTimeFormatConstructor.InitializeRelativeTimeFormat(Jint.Native.JsObject,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma402/#sec-InitializeRelativeTimeFormat
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.RelativeTimeFormatPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-relativetimeformat-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.SegmenterConstructor">
            <summary>
            https://tc39.es/ecma402/#sec-intl-segmenter-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.Intl.SegmenterPrototype">
            <summary>
            https://tc39.es/ecma402/#sec-properties-of-intl-segmenter-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.Iterator.IteratorInstance.CreateIterResultObject(Jint.Native.JsValue,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-createiterresultobject
            </summary>
        </member>
        <member name="T:Jint.Native.Iterator.IteratorProtocol">
            <summary>
            Handles looping of iterator values, sub-classes can use to implement wanted actions.
            </summary>
        </member>
        <member name="T:Jint.Native.Iterator.IteratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-%iteratorprototype%-object
            </summary>
        </member>
        <member name="T:Jint.Native.Iterator.IteratorResult">
            <summary>
            https://tc39.es/ecma262/#sec-createiterresultobject
            </summary>
        </member>
        <member name="T:Jint.Native.JsArguments">
            <summary>
            https://tc39.es/ecma262/#sec-arguments-exotic-objects
            </summary>
        </member>
        <member name="M:Jint.Native.JsArguments.Set(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue)">
            Implementation from ObjectInstance official specs as the one
            in ObjectInstance is optimized for the general case and wouldn't work
            for arrays
        </member>
        <member name="M:Jint.Native.JsArray.#ctor(Jint.Engine,System.UInt32,System.UInt32)">
            <summary>
            Creates a new array instance with defaults.
            </summary>
            <param name="engine">The engine that this array is bound to.</param>
            <param name="capacity">The initial size of underlying data structure, if you know you're going to add N items, provide N.</param>
            <param name="length">Sets the length of the array.</param>
        </member>
        <member name="M:Jint.Native.JsArray.#ctor(Jint.Engine,Jint.Native.JsValue[])">
            <summary>
            Possibility to construct valid array fast.
            The array will be owned and modified by Jint afterwards.
            </summary>
        </member>
        <member name="T:Jint.Native.JsArrayBuffer">
            <summary>
            https://tc39.es/ecma262/#sec-arraybuffer-objects
            </summary>
        </member>
        <member name="M:Jint.Native.JsArrayBuffer.DetachArrayBuffer(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-detacharraybuffer
            </summary>
        </member>
        <member name="M:Jint.Native.JsArrayBuffer.CloneArrayBuffer(Jint.Native.ArrayBuffer.ArrayBufferConstructor,System.Int32,System.UInt32)">
            <summary>
            https://tc39.es/ecma262/#sec-clonearraybuffer
            </summary>
        </member>
        <member name="M:Jint.Native.JsArrayBuffer.GetValueFromBuffer(System.Int32,Jint.Native.TypedArray.TypedArrayElementType,System.Boolean,Jint.Native.ArrayBuffer.ArrayBufferOrder,System.Nullable{System.Boolean})">
            <summary>
            https://tc39.es/ecma262/#sec-getvaluefrombuffer
            </summary>
        </member>
        <member name="M:Jint.Native.JsArrayBuffer.RawBytesToNumeric(Jint.Native.TypedArray.TypedArrayElementType,System.Int32,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-rawbytestonumeric
            </summary>
        </member>
        <member name="M:Jint.Native.JsArrayBuffer.SetValueInBuffer(System.Int32,Jint.Native.TypedArray.TypedArrayElementType,Jint.Native.TypedArray.TypedArrayValue,System.Boolean,Jint.Native.ArrayBuffer.ArrayBufferOrder,System.Nullable{System.Boolean})">
            <summary>
            https://tc39.es/ecma262/#sec-setvalueinbuffer
            </summary>
        </member>
        <member name="T:Jint.Native.JsDataView">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-dataview-instances
            </summary>
        </member>
        <member name="T:Jint.Native.JsEmpty">
            <summary>
            Special null object pattern for spec's EMPTY.
            </summary>
        </member>
        <member name="M:Jint.Native.JsNumber.IsZero">
            <summary>
            Either positive or negative zero.
            </summary>
        </member>
        <member name="T:Jint.Native.JsObject">
            <summary>
            Dynamically constructed JavaScript object instance.
            </summary>
        </member>
        <member name="M:Jint.Native.Json.JsonInstance.Parse(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-json.parse
            </summary>
        </member>
        <member name="M:Jint.Native.Json.JsonParser.#ctor(Jint.Engine)">
            <summary>
            Creates a new parser using the recursion depth specified in <see cref="P:Jint.Options.JsonOptions.MaxParseDepth"/>.
            </summary>
        </member>
        <member name="M:Jint.Native.Json.JsonParser.ParseJsonValue(Jint.Native.Json.JsonParser.State@)">
            <summary>
            Optimization.
            By calling Lex().Value for each type, we parse the token twice.
            It was already parsed by the peek() method.
            _lookahead.Value already contain the value.
            </summary>
        </member>
        <member name="P:Jint.Native.Json.JsonParser.State.CurrentDepth">
            <summary>
            The current recursion depth
            </summary>
        </member>
        <member name="M:Jint.Native.Json.JsonSerializer.SerializeJSONProperty(Jint.Native.JsValue,Jint.Native.JsValue,System.Text.ValueStringBuilder@)">
            <summary>
            https://tc39.es/ecma262/#sec-serializejsonproperty
            </summary>
        </member>
        <member name="M:Jint.Native.Json.JsonSerializer.QuoteJSONString(System.String,System.Text.ValueStringBuilder@)">
            <summary>
            https://tc39.es/ecma262/#sec-quotejsonstring
            </summary>
            <remarks>
            MethodImplOptions.AggressiveOptimization = 512 which is only exposed in .NET Core.
            </remarks>
        </member>
        <member name="M:Jint.Native.Json.JsonSerializer.SerializeJSONArray(Jint.Native.Object.ObjectInstance,System.Text.ValueStringBuilder@)">
            <summary>
            https://tc39.es/ecma262/#sec-serializejsonarray
            </summary>
        </member>
        <member name="M:Jint.Native.Json.JsonSerializer.SerializeJSONObject(Jint.Native.Object.ObjectInstance,System.Text.ValueStringBuilder@)">
            <summary>
            https://tc39.es/ecma262/#sec-serializejsonobject
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.Jint#Native#ICallable#Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.Jint#Native#IConstructor#Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.Get(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.GetOwnPropertyKeys(Jint.Runtime.Types)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.GetOwnProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.CompletePropertyDescriptor(Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            https://tc39.es/ecma262/#sec-completepropertydescriptor
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.Set(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.DefineOwnProperty(Jint.Native.JsValue,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.HasProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.Delete(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-delete-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.PreventExtensions">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-preventextensions
            </summary>
        </member>
        <member name="P:Jint.Native.JsProxy.Extensible">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-isextensible
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.GetPrototypeOf">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof
            </summary>
        </member>
        <member name="M:Jint.Native.JsProxy.SetPrototypeOf(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v
            </summary>
        </member>
        <member name="T:Jint.Native.JsSharedArrayBuffer">
            <summary>
            https://tc39.es/ecma262/#sec-sharedarraybuffer-objects
            </summary>
        </member>
        <member name="M:Jint.Native.JsSharedArrayBuffer.CreateSharedByteDataBlock(Jint.Runtime.Realm,System.UInt64)">
            <summary>
            https://tc39.es/ecma262/#sec-createsharedbytedatablock
            </summary>
        </member>
        <member name="M:Jint.Native.JsSymbol.ToString">
            <summary>
            https://tc39.es/ecma262/#sec-symboldescriptivestring
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.AllocateTypedArrayBuffer(System.UInt64)">
            <summary>
            https://tc39.es/ecma262/#sec-allocatetypedarraybuffer
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.HasProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-hasproperty-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.GetOwnProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-getownproperty-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.Get(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.Set(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-set-p-v-receiver
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.DefineOwnProperty(Jint.Native.JsValue,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-defineownproperty-p-desc
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.GetOwnPropertyKeys(Jint.Runtime.Types)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-ownpropertykeys
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.Delete(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-delete-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.IntegerIndexedElementGet(System.Double)">
            <summary>
            https://tc39.es/ecma262/#sec-integerindexedelementget
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.IntegerIndexedElementSet(System.Double,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-integerindexedelementset
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.IsValidIntegerIndex(System.Double)">
            <summary>
            https://tc39.es/ecma262/#sec-isvalidintegerindex
            </summary>
        </member>
        <member name="M:Jint.Native.JsTypedArray.IsValidIntegerIndex(System.Int32)">
            <summary>
            https://tc39.es/ecma262/#sec-isvalidintegerindex
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.FromObject(Jint.Engine,System.Object)">
            <summary>
            Creates a valid <see cref="T:Jint.Native.JsValue"/> instance from any <see cref="N:Jint.Native.Object"/> instance
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.FromObjectWithType(Jint.Engine,System.Object,System.Type)">
            <summary>
            Creates a valid <see cref="T:Jint.Native.JsValue"/> instance from any <see cref="N:Jint.Native.Object"/> instance, with a type
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.ToObject">
            <summary>
            Converts a <see cref="T:Jint.Native.JsValue"/> to its underlying CLR value.
            </summary>
            <returns>The underlying CLR value of the <see cref="T:Jint.Native.JsValue"/> instance.</returns>
        </member>
        <member name="M:Jint.Native.JsValue.ToBoolean">
            <summary>
            Coerces boolean value from <see cref="T:Jint.Native.JsValue"/> instance.
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.GetV(Jint.Runtime.Realm,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-getv
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.Get(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-get-o-p
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.Set(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-set-o-p-v-throw
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.InstanceofOperator(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-instanceofoperator
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.IsLooselyEqual(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-islooselyequal
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.Equals(System.Object)">
            <summary>
            Strict equality.
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.Equals(Jint.Native.JsValue)">
            <summary>
            Strict equality.
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.Clone">
            <summary>
            Some values need to be cloned in order to be assigned, like ConcatenatedString.
            </summary>
        </member>
        <member name="M:Jint.Native.JsValue.OrdinaryHasInstance(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinaryhasinstance
            </summary>
        </member>
        <member name="T:Jint.Native.JsWeakRef">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-weak-ref-instances
            </summary>
        </member>
        <member name="M:Jint.Native.Map.MapConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-map-iterable
            </summary>
        </member>
        <member name="M:Jint.Native.Map.MapConstructor.GroupBy(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-array-grouping/#sec-map.groupby
            </summary>
        </member>
        <member name="T:Jint.Native.Map.MapIteratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-%mapiteratorprototype%-object
            </summary>
        </member>
        <member name="T:Jint.Native.Map.MapPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-map-objects
            </summary>
        </member>
        <member name="M:Jint.Native.Math.MathInstance.Max(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-math.max
            </summary>
        </member>
        <member name="M:Jint.Native.Math.MathInstance.Min(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-math.min
            </summary>
        </member>
        <member name="M:Jint.Native.Math.MathInstance.F16Round(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-float16array/#sec-math.f16round
            </summary>
        </member>
        <member name="M:Jint.Native.Math.MathInstance.Hypot(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-math.hypot
            </summary>
        </member>
        <member name="M:Jint.Native.Math.MathInstance.SumPrecise(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://github.com/tc39/proposal-math-sum
            </summary>
        </member>
        <member name="T:Jint.Native.Math.SumPrecise">
            <summary>
            https://raw.githubusercontent.com/es-shims/Math.sumPrecise/main/sum.js
            adapted from https://github.com/tc39/proposal-math-sum/blob/f4286d0a9d8525bda61be486df964bf2527c8789/polyfill/polyfill.mjs
            https://www-2.cs.cmu.edu/afs/cs/project/quake/public/papers/robust-arithmetic.ps
            Shewchuk's algorithm for exactly floating point addition
            as implemented in Python's fsum: https://github.com/python/cpython/blob/48dfd74a9db9d4aa9c6f23b4a67b461e5d977173/Modules/mathmodule.c#L1359-L1474
            adapted to handle overflow via an additional "biased" partial, representing 2**1024 times its actual value
            </summary>
        </member>
        <member name="T:Jint.Native.Number.Dtoa.DoubleHelper">
            <summary>
            Helper functions for doubles.
            </summary>
        </member>
        <member name="T:Jint.Native.Number.NumberConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-number-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Number.NumberConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-number-constructor-number-value
            </summary>
        </member>
        <member name="M:Jint.Native.Number.NumberIntlHelper.GetDecimalDigitCount(System.Double)">
            <summary>
            Checks the powers of 10 of number to count the number of decimal digits.
            Returns a clamped JS_MAX_DECIMAL_DIGIT_COUNT count.
            JavaScript will use the shortest representation that accurately represents the value
            and clamp the decimal digits to JS_MAX_DECIMAL_DIGIT_COUNT.
            C# fills the digits with zeros up to the culture's numberFormat.NumberDecimalDigits
            and does not provide the same max (numberFormat.NumberDecimalDigits != JS_MAX_DECIMAL_DIGIT_COUNT).
            This function matches the JS behaviour for the decimal digits returned, this is the actual decimal
            digits for a number (with no zeros fill) clamped to JS_MAX_DECIMAL_DIGIT_COUNT.
            </summary>
        </member>
        <member name="T:Jint.Native.Number.NumberPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-number-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.Number.NumberPrototype.ToLocaleString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-number.prototype.tolocalestring
            </summary>
        </member>
        <member name="M:Jint.Native.Number.NumberPrototype.ToExponential(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://www.ecma-international.org/ecma-262/6.0/#sec-number.prototype.toexponential
            </summary>
        </member>
        <member name="T:Jint.Native.Object.ObjectChangeFlags">
            <summary>
            Keeps track of changes to object, mainly meant for prototype change detection.
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Assign(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.assign
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Entries(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.entries
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.FromEntries(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.fromentries
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Is(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.is
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object-value
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object-value
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.GetPrototypeOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.getprototypeof
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.SetPrototypeOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.setprototypeof
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.HasOwn(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.hasown
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.GetOwnPropertyDescriptor(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.GetOwnPropertyDescriptors(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.GetOwnPropertyNames(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.getownpropertynames
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.GetOwnPropertySymbols(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.getownpropertysymbols
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Create(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.create
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.DefineProperty(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.defineproperty
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.DefineProperties(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.defineproperties
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.ObjectDefineProperties(Jint.Native.Object.ObjectInstance,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-objectdefineproperties
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Seal(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.seal
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Freeze(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.freeze
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.PreventExtensions(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.preventextensions
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.IsSealed(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.issealed
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.IsFrozen(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.isfrozen
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.TestIntegrityLevel(Jint.Native.Object.ObjectInstance,Jint.Native.Object.ObjectInstance.IntegrityLevel)">
            <summary>
            https://tc39.es/ecma262/#sec-testintegritylevel
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.IsExtensible(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.isextensible
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Keys(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.keys
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Values(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.values
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.GroupBy(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-array-grouping/#sec-object.groupby
            </summary>
        </member>
        <member name="T:Jint.Native.Object.ObjectInstance">
            <summary>
            Fast access helpers which violate JavaScript specification, but helpful when accessed
            against ObjectInstance and prototype chain is intact.
            </summary>
        </member>
        <member name="P:Jint.Native.Object.ObjectInstance.Prototype">
            <summary>
            The prototype of this object.
            </summary>
        </member>
        <member name="P:Jint.Native.Object.ObjectInstance.Extensible">
            <summary>
            If true, own properties may be added to the
            object.
            </summary>
        </member>
        <member name="P:Jint.Native.Object.ObjectInstance.Class">
            <summary>
            A value indicating a specification defined classification of objects.
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Construct(Jint.Native.IConstructor,Jint.Native.JsValue[],Jint.Native.IConstructor)">
            <summary>
            https://tc39.es/ecma262/#sec-construct
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.SpeciesConstructor(Jint.Native.Object.ObjectInstance,Jint.Native.IConstructor)">
            <summary>
            https://tc39.es/ecma262/#sec-speciesconstructor
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.UnwrapFromGetter(Jint.Runtime.Descriptors.PropertyDescriptor,Jint.Native.JsValue)">
            <summary>
            A rarer case.
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.GetOwnProperty(Jint.Native.JsValue)">
            <summary>
            Returns the Property Descriptor of the named
            own property of this object, or undefined if
            absent.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.1
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Set(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinarysetwithowndescriptor
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.CanPut(Jint.Native.JsValue)">
            <summary>
            Returns a Boolean value indicating whether a
            [[Put]] operation with PropertyName can be
            performed.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.4
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.HasProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.DeletePropertyOrThrow(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-deletepropertyorthrow
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Delete(Jint.Native.JsValue)">
            <summary>
            Removes the specified named own property
            from the object. The flag controls failure
            handling.
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.DefineOwnProperty(Jint.Native.JsValue,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            Creates or alters the named own property to have the state described by a PropertyDescriptor.
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.ValidateAndApplyPropertyDescriptor(Jint.Native.Object.ObjectInstance,Jint.Native.JsValue,System.Boolean,Jint.Runtime.Descriptors.PropertyDescriptor,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            https://tc39.es/ecma262/#sec-validateandapplypropertydescriptor
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.FindWithCallback(Jint.Native.JsValue[],System.UInt64@,Jint.Native.JsValue@,System.Boolean,System.Boolean)">
            <summary>
            Handles the generic find of (callback[, thisArg])
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.SetPrototypeOf(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinarysetprototypeof
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.SetFunctionName(Jint.Native.JsValue,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-setfunctionname
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.CreateMethodProperty(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-createmethodproperty
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.CreateDataProperty(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-createdataproperty
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.CreateDataPropertyOrThrow(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-createdatapropertyorthrow
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.CreateNonEnumerableDataPropertyOrThrow(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-createnonenumerabledatapropertyorthrow
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.OrdinaryObjectCreate(Jint.Engine,Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinaryobjectcreate
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Invoke(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-invoke
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.SetIntegrityLevel(Jint.Native.Object.ObjectInstance.IntegrityLevel)">
            <summary>
            https://tc39.es/ecma262/#sec-setintegritylevel
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.DefineField(Jint.Native.Object.ObjectInstance,Jint.Native.Object.ClassFieldDefinition)">
            <summary>
            https://tc39.es/ecma262/#sec-definefield
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.FastSetProperty(System.String,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            Creates data property without checking prototype, property existence and overwrites any data already present.
            </summary>
            <remarks>
            Does not conform to JavaScript specification prototype etc. handling etc.
            </remarks>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.FastSetProperty(Jint.Native.JsValue,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            Creates data property without checking prototype, property existence and overwrites any data already present.
            </summary>
            <remarks>
            Does not conform to JavaScript specification prototype etc. handling etc.
            </remarks>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.FastSetDataProperty(System.String,Jint.Native.JsValue)">
            <summary>
            Creates data property (configurable, enumerable, writable) without checking prototype, property existence and overwrites any data already present.
            </summary>
            <remarks>
            Does not conform to JavaScript specification prototype etc. handling etc.
            </remarks>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.InitializeInstanceElements(Jint.Native.Function.ScriptFunction)">
            <summary>
            https://tc39.es/ecma262/#sec-initializeinstanceelements
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.PrivateMethodOrAccessorAdd(Jint.Native.Object.PrivateElement)">
            <summary>
            https://tc39.es/ecma262/#sec-privatemethodoraccessoradd
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.PrivateFieldAdd(Jint.Native.PrivateName,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-privatefieldadd
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.PrivateGet(Jint.Native.PrivateName)">
            <summary>
            https://tc39.es/ecma262/#sec-privateget
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.PrivateSet(Jint.Native.PrivateName,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-privateset
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.PrivateElementFind(Jint.Native.PrivateName)">
            <summary>
            https://tc39.es/ecma262/#sec-privateelementfind
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.DefineGetter(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.DefineSetter(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.LookupGetter(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.LookupSetter(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.ToLocaleString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.prototype.tolocalestring
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.ToObjectString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-object.prototype.tostring
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.HasOwnProperty(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.5
            </summary>
        </member>
        <member name="T:Jint.Native.PrivateName">
            <summary>
            Private names are a bit like symbols, they follow reference equality so that each one is globally to object,
            only exception to the rule is get/set pair which should share same private name.
            </summary>
        </member>
        <member name="T:Jint.Native.PrivateIdentifierNameComparer">
            <summary>
            Compares private identifiers by their name instead of reference equality.
            </summary>
        </member>
        <member name="M:Jint.Native.Promise.PromiseConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-promise-executor
            </summary>
        </member>
        <member name="M:Jint.Native.Promise.PromiseConstructor.Resolve(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-promise.resolve
            </summary>
        </member>
        <member name="M:Jint.Native.Promise.PromiseConstructor.PromiseResolve(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-promise-resolve
            </summary>
        </member>
        <member name="M:Jint.Native.Promise.PromiseConstructor.Reject(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-promise.reject
            </summary>
        </member>
        <member name="M:Jint.Native.Promise.PromiseConstructor.Try(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-promise-try/
            </summary>
        </member>
        <member name="T:Jint.Native.Proxy.ProxyConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.Proxy.ProxyConstructor.Construct(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxy-target-handler
            </summary>
        </member>
        <member name="M:Jint.Native.Proxy.ProxyConstructor.Revocable(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-proxy.revocable
            </summary>
        </member>
        <member name="M:Jint.Native.Proxy.ProxyConstructor.ProxyCreate(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-proxycreate
            </summary>
        </member>
        <member name="T:Jint.Native.Reflect.ReflectInstance">
            <summary>
            https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object
            </summary>
        </member>
        <member name="M:Jint.Native.Reflect.ReflectInstance.Construct(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-reflect.construct
            </summary>
        </member>
        <member name="M:Jint.Native.Reflect.ReflectInstance.DefineProperty(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-reflect.defineproperty
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-regexp-pattern-flags
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.Source(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-regexp.prototype.source
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.Replace(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.GetSubstitution(System.String,System.String,System.Int32,System.String[],Jint.Native.JsValue,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-getsubstitution
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.Split(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-regexp.prototype-@@split
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.Search(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-regexp.prototype-@@search
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.Match(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-regexp.prototype-@@match
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.MatchAll(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-regexp-prototype-matchall
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.RegExpBuiltinExec(Jint.Native.JsRegExp,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-regexpbuiltinexec
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.MakeMatchIndicesIndexPairArray(Jint.Engine,System.String,System.Collections.Generic.List{Jint.Native.JsNumber[]},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-makematchindicesindexpairarray
            </summary>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpPrototype.GetMatchIndexPair(Jint.Engine,System.String,Jint.Native.JsNumber[])">
            <summary>
            https://tc39.es/ecma262/#sec-getmatchindexpair
            </summary>
        </member>
        <member name="T:Jint.Native.RegExp.RegExpStringIteratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%-object
            </summary>
        </member>
        <member name="M:Jint.Native.Set.SetConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-set-iterable
            </summary>
        </member>
        <member name="T:Jint.Native.Set.SetIteratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-%setiteratorprototype%-object
            </summary>
        </member>
        <member name="T:Jint.Native.Set.SetPrototype">
            <summary>
            https://www.ecma-international.org/ecma-262/6.0/#sec-set-objects
            </summary>
        </member>
        <member name="T:Jint.Native.ShadowRealm.ShadowRealm">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-properties-of-shadowrealm-instances
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealm.PerformShadowRealmEval(System.String,Acornima.ParserOptions,Acornima.Parser,Jint.Runtime.Realm)">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-performshadowrealmeval
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealm.GetWrappedValue(Jint.Runtime.Realm,Jint.Runtime.Realm,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-getwrappedvalue
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealm.WrappedFunctionCreate(Jint.Runtime.Realm,Jint.Runtime.Realm,Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-wrappedfunctioncreate
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealm.CopyNameAndLength(Jint.Native.ShadowRealm.ShadowRealm.WrappedFunction,Jint.Native.Object.ObjectInstance,System.String,System.Int32)">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-copynameandlength
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealm.ShadowRealmImportValue(System.String,System.String,Jint.Runtime.Realm)">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-shadowrealmimportvalue
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealm.WrappedFunction.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-wrapped-function-exotic-objects-call-thisargument-argumentslist
            </summary>
        </member>
        <member name="T:Jint.Native.ShadowRealm.ShadowRealm.ShadowScriptValidator">
            <summary>
            If body Contains NewTarget is true, throw a SyntaxError exception.
            If body Contains SuperProperty is true, throw a SyntaxError exception.
            If body Contains SuperCall is true, throw a SyntaxError exception.
            </summary>
        </member>
        <member name="T:Jint.Native.ShadowRealm.ShadowRealmConstructor">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-properties-of-the-shadowRealm-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.ShadowRealm.ShadowRealmPrototype">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-properties-of-the-shadowrealm-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealmPrototype.Evaluate(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-shadowrealm.prototype.evaluate
            </summary>
        </member>
        <member name="M:Jint.Native.ShadowRealm.ShadowRealmPrototype.ImportValue(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-shadowrealm.prototype.importvalue
            </summary>
        </member>
        <member name="T:Jint.Native.SharedArrayBuffer.SharedArrayBufferConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferConstructor.IsView(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-arraybuffer.isview
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferConstructor.Species(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-arraybuffer-@@species
            </summary>
        </member>
        <member name="T:Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype.ByteLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-sharedarraybuffer.prototype.bytelength
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype.Slice(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-sharedarraybuffer.prototype.slice
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype.Growable(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-sharedarraybuffer.prototype.growable
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype.Grow(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-sharedarraybuffer.prototype.grow
            </summary>
        </member>
        <member name="M:Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype.MaxByteLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-sharedarraybuffer.prototype.maxbytelength
            </summary>
        </member>
        <member name="T:Jint.Native.String.StringConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-string-constructor
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringConstructor.FromCharCode(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.fromcharcode
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringConstructor.FromCodePoint(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.fromcodepoint
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringConstructor.Raw(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.raw
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringConstructor.Construct(Jint.Native.JsValue[],Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-string-constructor-string-value
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringConstructor.StringCreate(Jint.Native.JsString,Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/ecma262/#sec-stringcreate
            </summary>
        </member>
        <member name="T:Jint.Native.String.StringExecutionContext">
            <summary>
            Helper to cache common data structures when manipulating strings.
            </summary>
        </member>
        <member name="T:Jint.Native.String.StringInlHelper">
            <summary>
            Some internacionalization logic that is special or specific to determined culture.
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringInlHelper.LithuanianStringProcessor(System.String)">
            <summary>
            Lithuanian case is a bit special. For more info see:
            https://github.com/tc39/test262/blob/main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Lithuanian.js
            </summary>
        </member>
        <member name="T:Jint.Native.String.StringIteratorPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-%stringiteratorprototype%-object
            </summary>
        </member>
        <member name="T:Jint.Native.String.StringPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-string-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.Trim(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.trim
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.TrimStart(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.trimstart
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.TrimEnd(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.trimend
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.Split(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.split
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.At(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-relative-indexing-method/#sec-string-prototype-additions
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.Replace(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.replace
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.ReplaceAll(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.replaceall
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.LastIndexOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.lastindexof
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.IndexOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.indexof
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.CodePointAt(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.codepointat
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.PadStart(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.padstart
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.PadEnd(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.padend
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.StringPad(Jint.Native.JsValue,Jint.Native.JsValue[],System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-stringpad
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.StartsWith(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.startswith
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.EndsWith(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.endswith
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.Includes(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.includes
            </summary>
        </member>
        <member name="M:Jint.Native.String.StringPrototype.Repeat(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-string.prototype.repeat
            </summary>
        </member>
        <member name="T:Jint.Native.Symbol.SymbolConstructor">
            <summary>
            19.4
            http://www.ecma-international.org/ecma-262/6.0/index.html#sec-symbol-objects
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolConstructor.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/6.0/index.html#sec-symbol-description
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolConstructor.For(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-symbol.for
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolConstructor.KeyFor(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-symbol.keyfor
            </summary>
        </member>
        <member name="T:Jint.Native.Symbol.SymbolPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-symbol-prototype-object
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolPrototype.Description(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-symbol.prototype.description
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolPrototype.ToSymbolString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-symbol.prototype.tostring
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolPrototype.ValueOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-symbol.prototype.valueof
            </summary>
        </member>
        <member name="M:Jint.Native.Symbol.SymbolPrototype.ToPrimitive(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
            </summary>
        </member>
        <member name="T:Jint.Native.TypedArray.IntrinsicTypedArrayConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayConstructor.From(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.from
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayConstructor.Of(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.of
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayConstructor.TypedArraySpeciesCreate(Jint.Native.JsTypedArray,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#typedarray-species-create
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayConstructor.TypedArrayCreate(Jint.Runtime.Realm,Jint.Native.IConstructor,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#typedarray-create
            </summary>
        </member>
        <member name="T:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-%typedarrayprototype%-object
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Buffer(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.buffer
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ByteLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.bytelength
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ByteOffset(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.byteoffset
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.GetLength(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.length
            </summary>
        </member>
        <member name="P:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.TypedArrayWithBufferWitnessRecord.IsTypedArrayOutOfBounds">
            <summary>
            https://tc39.es/ecma262/#sec-istypedarrayoutofbounds
            </summary>
        </member>
        <member name="P:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.TypedArrayWithBufferWitnessRecord.TypedArrayLength">
            <summary>
            https://tc39.es/ecma262/#sec-typedarraylength
            </summary>
        </member>
        <member name="P:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.TypedArrayWithBufferWitnessRecord.TypedArrayByteLength">
            <summary>
            https://tc39.es/ecma262/#sec-typedarraybytelength
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ArrayBufferByteLength(Jint.Native.JsArrayBuffer,Jint.Native.ArrayBuffer.ArrayBufferOrder)">
            <summary>
            https://tc39.es/ecma262/#sec-arraybufferbytelength
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.CopyWithin(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Entries(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Every(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Fill(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Filter(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Find(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.FindIndex(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ForEach(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Includes(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.IndexOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Join(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Keys(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.LastIndexOf(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Map(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Reduce(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ReduceRight(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Reverse(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Set(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.SetTypedArrayFromTypedArray(Jint.Native.JsTypedArray,System.Double,Jint.Native.JsTypedArray)">
            <summary>
            https://tc39.es/ecma262/#sec-settypedarrayfromtypedarray
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.SetTypedArrayFromArrayLike(Jint.Native.JsTypedArray,System.Int32,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-settypedarrayfromarraylike
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.At(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/proposal-relative-indexing-method/#sec-%typedarray.prototype%-additions
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Slice(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Some(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Sort(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Subarray(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ToLocaleString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.Values(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.IntrinsicTypedArrayPrototype.ToStringTag(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag
            </summary>
        </member>
        <member name="T:Jint.Native.TypedArray.TypedArrayConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-typedarray-constructors
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.TypedArrayConstructor.IterableToList(Jint.Runtime.Realm,Jint.Native.JsValue,Jint.Native.ICallable)">
            <summary>
            https://tc39.es/ecma262/#sec-iterabletolist
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.TypedArrayConstructor.InitializeTypedArrayFromTypedArray(Jint.Native.JsTypedArray,Jint.Native.JsTypedArray)">
            <summary>
            https://tc39.es/ecma262/#sec-initializetypedarrayfromtypedarray
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.TypedArrayConstructor.InitializeTypedArrayFromArrayBuffer(Jint.Native.JsTypedArray,Jint.Native.JsArrayBuffer,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            https://tc39.es/ecma262/#sec-initializetypedarrayfromarraybuffer
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.TypedArrayConstructor.InitializeTypedArrayFromArrayLike(Jint.Native.JsTypedArray,Jint.Native.Object.ObjectInstance)">
            <summary>
            https://tc39.es/ecma262/#sec-initializetypedarrayfromarraylike
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.TypedArrayConstructor.AllocateTypedArray(Jint.Native.JsValue,System.UInt32)">
            <summary>
            https://tc39.es/ecma262/#sec-allocatetypedarray
            </summary>
        </member>
        <member name="T:Jint.Native.TypedArray.TypedArrayPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-typedarray-prototype-objects
            </summary>
        </member>
        <member name="T:Jint.Native.TypedArray.TypedArrayValue">
            <summary>
            Container for either double or BigInteger.
            </summary>
        </member>
        <member name="M:Jint.Native.TypedArray.TypedArrayValue.#ctor(Jint.Runtime.Types,System.Double,System.Numerics.BigInteger)">
            <summary>
            Container for either double or BigInteger.
            </summary>
        </member>
        <member name="T:Jint.Native.WeakMap.WeakMapPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-weakmap-objects
            </summary>
        </member>
        <member name="T:Jint.Native.WeakRef.WeakRefConstructor">
            <summary>
            https://tc39.es/ecma262/#sec-weak-ref-constructor
            </summary>
        </member>
        <member name="T:Jint.Native.WeakRef.WeakRefPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-properties-of-the-weak-ref-prototype-object
            </summary>
        </member>
        <member name="T:Jint.Native.WeakSet.WeakSetPrototype">
            <summary>
            https://tc39.es/ecma262/#sec-weakset-objects
            </summary>
        </member>
        <member name="P:Jint.Options.Constraints">
            <summary>
            Execution constraints for the engine.
            </summary>
        </member>
        <member name="P:Jint.Options.Interop">
            <summary>
            CLR interop related options.
            </summary>
        </member>
        <member name="P:Jint.Options.Debugger">
            <summary>
            Debugger configuration.
            </summary>
        </member>
        <member name="P:Jint.Options.Host">
            <summary>
            Host options.
            </summary>
        </member>
        <member name="P:Jint.Options.Modules">
            <summary>
            Module options
            </summary>
        </member>
        <member name="P:Jint.Options.Strict">
            <summary>
            Whether the code should be always considered to be in strict mode. Can improve performance.
            </summary>
        </member>
        <member name="P:Jint.Options.Culture">
            <summary>
            The culture the engine runs on, defaults to current culture.
            </summary>
        </member>
        <member name="P:Jint.Options.TimeSystem">
            <summary>
            Configures a time system to use. Defaults to DefaultTimeSystem using local time.
            </summary>
        </member>
        <member name="P:Jint.Options.TimeZone">
            <summary>
            The time zone the engine runs on, defaults to local. Same as setting DefaultTimeSystem with the time zone.
            </summary>
        </member>
        <member name="P:Jint.Options.ReferenceResolver">
            <summary>
            Reference resolver allows customizing behavior for reference resolving. This can be useful in cases where
            you want to ignore long chain of property accesses that might throw if anything is null or undefined.
            An example of such is <code>var a = obj.field.subField.value</code>. Custom resolver could accept chain to return
            null/undefined on first occurrence.
            </summary>
        </member>
        <member name="P:Jint.Options.StringCompilationAllowed">
            <summary>
            Whether calling 'eval' with custom code and function constructors taking function code as string is allowed.
            Defaults to true.
            </summary>
            <remarks>
            https://tc39.es/ecma262/#sec-hostensurecancompilestrings
            </remarks>
        </member>
        <member name="P:Jint.Options.Json">
            <summary>
            Options for the built-in JSON (de)serializer which
            gets used using <c>JSON.parse</c> or <c>JSON.stringify</c>
            </summary>
        </member>
        <member name="P:Jint.Options.ExperimentalFeatures">
            <summary>
            What experimental features are allowed, functionality may lacking or even plain wrong. Defaults to having none.
            </summary>
        </member>
        <member name="M:Jint.Options.Apply(Jint.Engine)">
            <summary>
            Called by the <see cref="T:Jint.Engine"/> instance that loads this <see cref="T:Jint.Options" />
            once it is loaded.
            </summary>
        </member>
        <member name="P:Jint.Options.DebuggerOptions.Enabled">
            <summary>
            Whether debugger functionality is enabled, defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.DebuggerOptions.StatementHandling">
            <summary>
            Configures the statement handling strategy, defaults to Ignore.
            </summary>
        </member>
        <member name="P:Jint.Options.DebuggerOptions.InitialStepMode">
            <summary>
            Configures the step mode used when entering the script.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.Enabled">
            <summary>
            Whether accessing CLR and it's types and methods is allowed from JS code, defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.AllowGetType">
            <summary>
            Whether to expose <see cref="M:System.Object.GetType"></see> which can allow bypassing allow lists and open a way to reflection.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.AllowSystemReflection">
            <summary>
            Whether Jint should allow wrapping objects from System.Reflection namespace.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.AllowWrite">
            <summary>
            Whether writing to CLR objects is allowed (set properties), defaults to true.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.AllowOperatorOverloading">
            <summary>
            Whether operator overloading resolution is allowed, defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ExtensionMethodTypes">
            <summary>
            Types holding extension methods that should be considered when resolving methods.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ObjectConverters">
            <summary>
            Object converters to try when build-in conversions.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.TrackObjectWrapperIdentity">
            <summary>
            Whether identity map is persisted for object wrappers in order to maintain object identity. This can cause
            memory usage to grow when targeting large set and freeing of memory can be delayed due to ConditionalWeakTable semantics.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.WrapObjectHandler">
            <summary>
            If no known type could be guessed, objects are by default wrapped as an
            ObjectInstance using class ObjectWrapper. This function can be used to
            change the behavior.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.BuildCallStackHandler">
            <summary>
            The handler used to build stack traces. Changing this enables mapping
            stack traces to code different from the code being executed, eg. when
            executing code transpiled from TypeScript.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.MemberAccessor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ExceptionHandler">
            <summary>
            Exceptions that thrown from CLR code are converted to JavaScript errors and
            can be used in at try/catch statement. By default these exceptions are bubbled
            to the CLR host and interrupt the script execution. If handler returns true these exceptions are converted
            to JS errors that can be caught by the script.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.AllowedAssemblies">
            <summary>
            Assemblies to allow scripts to call CLR types directly like <example>System.IO.File</example>.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.TypeResolver">
            <summary>
            Type and member resolving strategy, which allows filtering allowed members and configuring member
            name matching comparison.
            </summary>
            <remarks>
            As this object holds caching state same instance should be shared between engines, if possible.
            </remarks>
        </member>
        <member name="P:Jint.Options.InteropOptions.ValueCoercion">
            <summary>
            When writing values to CLR objects, how should JS values be coerced to CLR types.
            Defaults to only coercing to string values when writing to string targets.
            </summary>
        </member>
        <member name="F:Jint.Options.InteropOptions.CreateClrObject">
            <summary>
            Strategy to create a CLR object to hold converted <see cref="T:Jint.Native.Object.ObjectInstance"/>.
            </summary>
        </member>
        <member name="F:Jint.Options.InteropOptions.CreateTypeReferenceObject">
            <summary>
            Strategy to create a CLR object from TypeReference.
            Defaults to retuning null which makes TypeReference attempt to find suitable constructor.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.SerializeToJson">
            <summary>
            When not null, is used to serialize any CLR object in an
            <see cref="T:Jint.Runtime.Interop.IObjectWrapper"/> passing through 'JSON.stringify'.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.DateTimeKind">
            <summary>
            What kind of date time should be produced when JavaScript date is converted to DateTime. If Local, uses <see cref="P:Jint.Options.TimeZone"/>.
            Defaults to <see cref="F:System.DateTimeKind.Utc"/>.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.AttachArrayPrototype">
            <summary>
            Should the Array prototype be attached instead of Object prototype to the wrapped interop objects when type looks suitable. Defaults to true.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ThrowOnUnresolvedMember">
            <summary>
            Whether the engine should throw an error when a member is not found on a CLR object. Defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ObjectWrapperReportedMemberTypes">
            <summary>
            Types of CLR members reported by <see cref="T:Jint.Runtime.Interop.ObjectWrapper"/> when enumerating properties/serializing <see cref="M:Jint.Runtime.Interop.ObjectWrapper.ToObject"/>.
            Supported values are: <see cref="F:System.Reflection.MemberTypes.Field"/>, <see cref="F:System.Reflection.MemberTypes.Property"/>, <see cref="F:System.Reflection.MemberTypes.Method"/>.
            All other values are ignored.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ObjectWrapperReportedFieldBindingFlags">
            <summary>
            Reported member binding flags when reflecting, defaults to <see cref="F:System.Reflection.BindingFlags.Instance" /> | <see cref="F:System.Reflection.BindingFlags.Public" />.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ObjectWrapperReportedPropertyBindingFlags">
            <summary>
            Reported member binding flags when reflecting, defaults to <see cref="F:System.Reflection.BindingFlags.Instance" /> | <see cref="F:System.Reflection.BindingFlags.Public" />.
            </summary>
        </member>
        <member name="P:Jint.Options.InteropOptions.ObjectWrapperReportedMethodBindingFlags">
            <summary>
            Reported member binding flags when reflecting, defaults to <see cref="F:System.Reflection.BindingFlags.Instance" /> | <see cref="F:System.Reflection.BindingFlags.Public" /> | <see cref="F:System.Reflection.BindingFlags.Static" />.
            </summary>
        </member>
        <member name="P:Jint.Options.ConstraintOptions.Constraints">
            <summary>
            Registered constraints.
            </summary>
        </member>
        <member name="P:Jint.Options.ConstraintOptions.MaxRecursionDepth">
            <summary>
            Maximum recursion depth allowed, defaults to -1 (no checks).
            </summary>
        </member>
        <member name="P:Jint.Options.ConstraintOptions.MaxExecutionStackCount">
            <summary>
            Maximum recursion stack count, defaults to -1 (as-is dotnet stacktrace).
            </summary>
            <remarks>
            Chrome and V8 based engines (ClearScript) that can handle 13955.
            When set to a different value except -1, it can reduce slight performance/stack trace readability drawback. (after hitting the engine's own limit),
            When max stack size to be exceeded, Engine throws an exception <see cref="T:Jint.Runtime.JavaScriptException" />.
            </remarks>
        </member>
        <member name="P:Jint.Options.ConstraintOptions.RegexTimeout">
            <summary>
            Maximum time a Regex is allowed to run, defaults to 10 seconds.
            </summary>
        </member>
        <member name="P:Jint.Options.ConstraintOptions.MaxArraySize">
            <summary>
            The maximum size for JavaScript array, defaults to <see cref="F:System.UInt32.MaxValue"/>.
            </summary>
        </member>
        <member name="T:Jint.Options.HostOptions">
            <summary>
            Host related customization, still work in progress.
            </summary>
        </member>
        <member name="T:Jint.Options.ModuleOptions">
            <summary>
            Module related customization
            </summary>
        </member>
        <member name="P:Jint.Options.ModuleOptions.RegisterRequire">
            <summary>
            Whether to register require function to engine which will delegate to module loader, defaults to false.
            </summary>
        </member>
        <member name="P:Jint.Options.ModuleOptions.ModuleLoader">
            <summary>
            Module loader implementation, by default exception will be thrown if module loading is not enabled.
            </summary>
        </member>
        <member name="T:Jint.Options.JsonOptions">
            <summary>
            JSON.parse / JSON.stringify related customization
            </summary>
        </member>
        <member name="P:Jint.Options.JsonOptions.MaxParseDepth">
            <summary>
            The maximum depth allowed when parsing JSON files using "JSON.parse",
            defaults to 64.
            </summary>
        </member>
        <member name="T:Jint.ValueCoercionType">
            <summary>
            Rules for writing values to CLR fields.
            </summary>
        </member>
        <member name="F:Jint.ValueCoercionType.None">
            <summary>
            No coercion will be done. If there's no type converter, and error will be thrown.
            </summary>
        </member>
        <member name="F:Jint.ValueCoercionType.Boolean">
            <summary>
            JS coercion using boolean rules "dog" == true, "" == false, 1 == true, 3 == true, 0 == false, { "prop": 1 } == true etc.
            </summary>
        </member>
        <member name="F:Jint.ValueCoercionType.Number">
            <summary>
            JS coercion to numbers, false == 0, true == 1. valueOf functions will be used when available for object instances.
            Valid against targets of type: Decimal, Double, Int32, Int64.
            </summary>
        </member>
        <member name="F:Jint.ValueCoercionType.String">
            <summary>
            JS coercion to strings, toString function will be used when available for objects.
            </summary>
        </member>
        <member name="F:Jint.ValueCoercionType.All">
            <summary>
            All coercion rules enabled.
            </summary>
        </member>
        <member name="T:Jint.ExperimentalFeature">
            <summary>
            Features that only work partially, if all.
            </summary>
        </member>
        <member name="F:Jint.ExperimentalFeature.None">
            <summary>
            No experimental features enabled.
            </summary>
        </member>
        <member name="F:Jint.ExperimentalFeature.Generators">
            <summary>
            Generator support
            </summary>
        </member>
        <member name="F:Jint.ExperimentalFeature.TaskInterop">
            <summary>
            Wrapping tasks to promises
            </summary>
        </member>
        <member name="F:Jint.ExperimentalFeature.All">
            <summary>
            All coercion rules enabled.
            </summary>
        </member>
        <member name="T:Jint.OptionsExtensions">
            <summary>
            Compatibility layer to allow fluent syntax against options object.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.Strict(Jint.Options,System.Boolean)">
            <summary>
            Run the script in strict mode.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.DebuggerStatementHandling(Jint.Options,Jint.Runtime.Debugger.DebuggerStatementHandling)">
            <summary>
            Selects the handling for script <code>debugger</code> statements.
            </summary>
            <remarks>
            The <c>debugger</c> statement can either be ignored (default) trigger debugging at CLR level (e.g. Visual Studio),
            or trigger a break in Jint's DebugHandler.
            </remarks>
        </member>
        <member name="M:Jint.OptionsExtensions.DebugMode(Jint.Options,System.Boolean)">
            <summary>
            Allow to run the script in debug mode.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.InitialStepMode(Jint.Options,Jint.Runtime.Debugger.StepMode)">
            <summary>
            Set initial step mode.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.AddObjectConverter``1(Jint.Options)">
            <summary>
            Adds a <see cref="T:Jint.Runtime.Interop.IObjectConverter"/> instance to convert CLR types to <see cref="T:Jint.Native.JsValue"/>
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.AddObjectConverter(Jint.Options,Jint.Runtime.Interop.IObjectConverter)">
            <summary>
            Adds a <see cref="T:Jint.Runtime.Interop.IObjectConverter"/> instance to convert CLR types to <see cref="T:Jint.Native.JsValue"/>
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.LimitRecursion(Jint.Options,System.Int32)">
            <summary>
            Sets maximum allowed depth of recursion.
            </summary>
            <param name="options">Options to modify</param>
            <param name="maxRecursionDepth">
            The allowed depth.
            a) In case max depth is zero no recursion is allowed.
            b) In case max depth is equal to n it means that in one scope function can be called no more than n times.
            </param>
            <returns>Options instance for fluent syntax</returns>
        </member>
        <member name="M:Jint.OptionsExtensions.DisableStringCompilation(Jint.Options,System.Boolean)">
            <summary>
            Disables calling 'eval' with custom code and function constructors taking function code as string.
            By default eval and function code parsing is allowed.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.SetWrapObjectHandler(Jint.Options,Jint.Options.WrapObjectDelegate)">
            <summary>
            If no known type could be guessed, objects are normally wrapped as an
            ObjectInstance using class ObjectWrapper. This function can be used to
            register a handler for a customized handling.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.SetBuildCallStackHandler(Jint.Options,Jint.Options.BuildCallStackDelegate)">
            <summary>
            Sets the handler used to build stack traces. This is useful if the code currently
            running was transpiled (eg. TypeScript) and the source map of original code is available.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.SetTypeConverter(Jint.Options,System.Func{Jint.Engine,Jint.Runtime.Interop.ITypeConverter})">
            <summary>
            Sets the type converter to use.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.SetMemberAccessor(Jint.Options,Jint.Options.MemberAccessorDelegate)">
            <summary>
            Registers a delegate that is called when CLR members are invoked. This allows
            to change what values are returned for specific CLR objects, or if any value
            is returned at all.
            </summary>
            <param name="options">Options to modify</param>
            <param name="accessor">
            The delegate to invoke for each CLR member. If the delegate
            returns <c>null</c>, the standard evaluation is performed.
            </param>
        </member>
        <member name="M:Jint.OptionsExtensions.AllowClr(Jint.Options,System.Reflection.Assembly[])">
            <summary>
            Allows scripts to call CLR types directly like <example>System.IO.File</example>
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.CatchClrExceptions(Jint.Options)">
            <summary>
            Exceptions thrown from CLR code are converted to JavaScript errors and
            can be used in at try/catch statement. By default these exceptions are bubbled
            to the CLR host and interrupt the script execution.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.CatchClrExceptions(Jint.Options,Jint.Options.ExceptionHandlerDelegate)">
            <summary>
            Exceptions that thrown from CLR code are converted to JavaScript errors and
            can be used in at try/catch statement. By default these exceptions are bubbled
            to the CLR host and interrupt the script execution.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.Configure(Jint.Options,System.Action{Jint.Engine})">
            <summary>
            Registers some custom logic to apply on an <see cref="T:Jint.Engine"/> instance when the options
            are loaded.
            </summary>
            <param name="options">Options to modify</param>
            <param name="configuration">The action to register.</param>
        </member>
        <member name="M:Jint.OptionsExtensions.UseHostFactory``1(Jint.Options,System.Func{Jint.Engine,``0})">
            <summary>
            Allows to configure how the host is constructed.
            </summary>
            <remarks>
            Passed Engine instance is still in construction and should not be used during call stage.
            </remarks>
        </member>
        <member name="M:Jint.OptionsExtensions.EnableModules(Jint.Options,System.String,System.Boolean)">
            <summary>
            Enables module loading in the engine via the 'require' function. By default there's no sand-boxing and
            you need to trust the script loading the modules not doing bad things.
            </summary>
        </member>
        <member name="M:Jint.OptionsExtensions.EnableModules(Jint.Options,Jint.Runtime.Modules.IModuleLoader)">
            <summary>
            Enables module loading using a custom loader implementation.
            </summary>
        </member>
        <member name="P:Jint.IParsingOptions.CompileRegex">
            <summary>
            Gets or sets whether to create compiled <see cref="T:System.Text.RegularExpressions.Regex"/> instances when adapting regular expressions.
            Defaults to <see langword="null"/>, which means that in the case of non-prepared scripts and modules
            regular expressions will be interpreted, otherwise they will be compiled.
            </summary>
        </member>
        <member name="P:Jint.IParsingOptions.RegexTimeout">
            <summary>
            Gets or sets the default timeout for created <see cref="T:System.Text.RegularExpressions.Regex"/> instances.
            Defaults to <see langword="null"/>, which means that in the case of non-prepared scripts and modules
            the <see cref="P:Jint.Options.ConstraintOptions.RegexTimeout"/> setting should apply,
            otherwise the default of the <see cref="P:Acornima.ParserOptions.RegexTimeout"/> setting (10 seconds).
            </summary>
            <remarks>
            Please note that <see cref="P:Jint.Options.ConstraintOptions.RegexTimeout"/> setting will be ignored
            if this option is set to a value other than <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Jint.IParsingOptions.Tolerant">
            <summary>
            Gets or sets whether to parse the source code in tolerant mode.
            Defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Jint.ScriptParsingOptions.AllowReturnOutsideFunction">
            <summary>
            Gets or sets whether to allow return statements at the top level.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Jint.ScriptParsingOptions.CompileRegex">
            <inheritdoc/>
        </member>
        <member name="P:Jint.ScriptParsingOptions.RegexTimeout">
            <inheritdoc/>
        </member>
        <member name="P:Jint.ScriptParsingOptions.Tolerant">
            <inheritdoc/>
        </member>
        <member name="P:Jint.ModuleParsingOptions.CompileRegex">
            <inheritdoc/>
        </member>
        <member name="P:Jint.ModuleParsingOptions.RegexTimeout">
            <inheritdoc/>
        </member>
        <member name="P:Jint.ModuleParsingOptions.Tolerant">
            <inheritdoc/>
        </member>
        <member name="T:Jint.Pooling.ArgumentsInstancePool">
            <summary>
            Cache reusable <see cref="T:Jint.Native.JsArguments" /> instances as we allocate them a lot.
            </summary>
        </member>
        <member name="T:Jint.Pooling.ConcurrentObjectPool`1">
             <summary>
             Generic implementation of object pooling pattern with predefined pool size limit. The main
             purpose is that limited number of frequently used objects can be kept in the pool for
             further recycling.
            
             Notes:
             1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
                is no space in the pool, extra returned objects will be dropped.
            
             2) it is implied that if object was obtained from a pool, the caller will return it back in
                a relatively short time. Keeping checked out objects for long durations is ok, but
                reduces usefulness of pooling. Just new up your own.
            
             Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice.
             Rationale:
                If there is no intent for reusing the object, do not use pool - just use "new".
             </summary>
        </member>
        <member name="T:Jint.Pooling.ConcurrentObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Jint.Pooling.ConcurrentObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Jint.Pooling.ConcurrentObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Jint.Pooling.ConcurrentObjectPool`1.ForgetTrackedObject(`0,`0)">
             <summary>
             Removes an object from leak tracking.
            
             This is called when an object is returned to the pool.  It may also be explicitly
             called if an object allocated from the pool is intentionally not being returned
             to the pool.  This can be of use with pooled arrays if the consumer wants to
             return a larger array to the pool than was originally allocated.
             </summary>
        </member>
        <member name="T:Jint.Pooling.JsValueArrayPool">
            <summary>
            Cache reusable <see cref="T:Jint.Native.JsValue" /> array instances as we allocate them a lot.
            </summary>
        </member>
        <member name="T:Jint.Pooling.ObjectPool`1">
             <summary>
             Generic implementation of object pooling pattern with predefined pool size limit. The main
             purpose is that limited number of frequently used objects can be kept in the pool for
             further recycling.
            
             Notes:
             1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
                is no space in the pool, extra returned objects will be dropped.
            
             2) it is implied that if object was obtained from a pool, the caller will return it back in
                a relatively short time. Keeping checked out objects for long durations is ok, but
                reduces usefulness of pooling. Just new up your own.
            
             Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice.
             Rationale:
                If there is no intent for reusing the object, do not use pool - just use "new".
             </summary>
        </member>
        <member name="T:Jint.Pooling.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Jint.Pooling.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Jint.Pooling.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Jint.Pooling.ObjectPool`1.ForgetTrackedObject(`0,`0)">
             <summary>
             Removes an object from leak tracking.
            
             This is called when an object is returned to the pool.  It may also be explicitly
             called if an object allocated from the pool is intentionally not being returned
             to the pool.  This can be of use with pooled arrays if the consumer wants to
             return a larger array to the pool than was originally allocated.
             </summary>
        </member>
        <member name="T:Jint.Pooling.ReferencePool">
            <summary>
            Cache reusable <see cref="T:Jint.Runtime.Reference" /> instances as we allocate them a lot.
            </summary>
        </member>
        <member name="P:Jint.IPreparationOptions`1.FoldConstants">
            <summary>
            Gets or sets whether to fold constant expressions during the preparation phase.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Jint.ScriptPreparationOptions.FoldConstants">
            <inheritdoc/>
        </member>
        <member name="P:Jint.ModulePreparationOptions.FoldConstants">
            <inheritdoc/>
        </member>
        <member name="M:Jint.Runtime.Arguments.At(Jint.Native.JsValue[],System.Int32,Jint.Native.JsValue)">
            <summary>
            Returns the arguments at the provided position or Undefined if not present
            </summary>
            <param name="args"></param>
            <param name="index">The index of the parameter to return</param>
            <param name="undefinedValue">The value to return is the parameter is not provided</param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.CallStack.JintCallStack.GetPropertyKey(Acornima.Ast.Node)">
            <summary>
            A version of <see cref="M:Jint.AstExtensions.GetKey(Acornima.Ast.Expression,Jint.Engine,System.Boolean)"/> that cannot get into loop as we are already building a stack.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Completion">
            <summary>
            https://tc39.es/ecma262/#sec-completion-record-specification-type
            </summary>
        </member>
        <member name="M:Jint.Runtime.Completion.UpdateEmpty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-updateempty
            </summary>
        </member>
        <member name="T:Jint.Runtime.Debugger.BreakLocation">
            <summary>
            BreakLocation is a combination of an Esprima position (line and column) and a source (path or identifier of script).
            Like Esprima, first column is 0 and first line is 1.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Debugger.BreakPointCollection">
            <summary>
            Collection of breakpoints.
            </summary>
            <remarks>
            Only allows a single breakpoint at the same location (source, column and line).
            Adding a new breakpoint at the same location <i>replaces</i> the old one - this allows replacing e.g. a
            conditional breakpoint with a new condition (or remove the condition).
            </remarks>
        </member>
        <member name="P:Jint.Runtime.Debugger.BreakPointCollection.Active">
            <summary>
            Gets or sets whether breakpoints are activated. When false, all breakpoints will fail to match (and be skipped by the debugger).
            </summary>
        </member>
        <member name="M:Jint.Runtime.Debugger.BreakPointCollection.Set(Jint.Runtime.Debugger.BreakPoint)">
            <summary>
            Sets a new breakpoint. Note that this will replace any breakpoint at the same location (source/column/line).
            </summary>
        </member>
        <member name="M:Jint.Runtime.Debugger.BreakPointCollection.RemoveAt(Jint.Runtime.Debugger.BreakLocation)">
            <summary>
            Removes breakpoint with the given location (source/column/line).
            Note that a null source matches <i>any</i> source.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Debugger.BreakPointCollection.Contains(Jint.Runtime.Debugger.BreakLocation)">
            <summary>
            Checks whether collection contains a breakpoint at the given location (source/column/line).
            Note that a null source matches <i>any</i> source.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Debugger.BreakPointCollection.Clear">
            <summary>
            Removes all breakpoints.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.CallFrame.FunctionName">
            <summary>
            Name of the function of this call frame. For global scope, this will be "(anonymous)".
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.CallFrame.FunctionLocation">
            <summary>
            Source location of function of this call frame.
            </summary>
            <remarks>For top level (global) call frames, as well as functions not defined in script, this will be null.</remarks>
        </member>
        <member name="P:Jint.Runtime.Debugger.CallFrame.Location">
            <summary>
            Currently executing source location in this call frame.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.CallFrame.ScopeChain">
            <summary>
            The scope chain of this call frame.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.CallFrame.This">
            <summary>
            The value of <c>this</c> in this call frame.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.CallFrame.ReturnValue">
            <summary>
            The return value of this call frame. Will be null for call frames that aren't at the top of the stack,
            as well as if execution is not at a return point.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Debugger.DebugEvaluationException">
            <summary>
            Thrown when an evaluation executed through the DebugHandler results in any type of error - parsing or runtime.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Debugger.DebuggerStatementHandling">
            <summary>
            Choice of handling for script <c>debugger</c> statements.
            </summary>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebuggerStatementHandling.Ignore">
            <summary>
            No action will be taken when encountering a <c>debugger</c> statement.
            </summary>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebuggerStatementHandling.Clr">
            <summary>
            <c>debugger</c> statements will trigger debugging through <see cref="T:System.Diagnostics.Debugger"/>.
            </summary>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebuggerStatementHandling.Script">
            <summary>
            <c>debugger</c> statements will trigger a break in Jint's DebugHandler. See <see cref="E:Jint.Runtime.Debugger.DebugHandler.Break"/>.
            </summary>
        </member>
        <member name="E:Jint.Runtime.Debugger.DebugHandler.BeforeEvaluate">
            <summary>
            Triggered before the engine executes/evaluates the parsed AST of a script or module.
            </summary>
        </member>
        <member name="E:Jint.Runtime.Debugger.DebugHandler.Step">
            <summary>
            The Step event is triggered before the engine executes a step-eligible execution point.
            </summary>
            <remarks>
            If the current step mode is <see cref="F:Jint.Runtime.Debugger.StepMode.None"/>, this event is never triggered. The script may
            still be paused by a debugger statement or breakpoint, but these will trigger the
            <see cref="E:Jint.Runtime.Debugger.DebugHandler.Break"/> event.
            </remarks>
        </member>
        <member name="E:Jint.Runtime.Debugger.DebugHandler.Break">
            <summary>
            The Break event is triggered when a breakpoint or debugger statement is hit.
            </summary>
            <remarks>
            This is event is not triggered if the current script location was reached by stepping. In that case, only
            the <see cref="E:Jint.Runtime.Debugger.DebugHandler.Step"/> event is triggered.
            </remarks>
        </member>
        <member name="E:Jint.Runtime.Debugger.DebugHandler.Skip">
            <summary>
            The Skip event is triggered for each execution point, when the point doesn't trigger a <see cref="E:Jint.Runtime.Debugger.DebugHandler.Step"/>
            or <see cref="E:Jint.Runtime.Debugger.DebugHandler.Break"/> event.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugHandler.CurrentLocation">
            <summary>
            The location of the current (step-eligible) AST node being executed.
            </summary>
            <remarks>
            The location is available as long as DebugMode is enabled - i.e. even when not stepping
            or hitting a breakpoint.
            </remarks>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugHandler.BreakPoints">
            <summary>
            Collection of active breakpoints for the engine.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Debugger.DebugHandler.Evaluate(Jint.Prepared{Acornima.Ast.Script}@)">
            <summary>
            Evaluates a script (expression) within the current execution context.
            </summary>
            <remarks>
            Internally, this is used for evaluating breakpoint conditions, but may also be used for e.g. watch lists
            in a debugger.
            </remarks>
        </member>
        <member name="M:Jint.Runtime.Debugger.DebugHandler.Evaluate(System.String,Jint.ScriptParsingOptions)">
            <inheritdoc cref="M:Jint.Runtime.Debugger.DebugHandler.Evaluate(Jint.Prepared{Acornima.Ast.Script}@)" />
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.PauseType">
            <summary>
            Indicates the type of pause that resulted in this DebugInformation being generated.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.BreakPoint">
            <summary>
            Breakpoint at the current location. This will be set even if the pause wasn't caused by the breakpoint.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.CallStack">
            <summary>
            The current call stack.
            </summary>
            <remarks>This will always include at least a call frame for the global environment.</remarks>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.CurrentNode">
            <summary>
            The AST Node that will be executed on next step.
            Note that this will be null when execution is at a return point.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.Location">
            <summary>
            The current source Location.
            For return points, this starts and ends at the end of the function body.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.CurrentMemoryUsage">
            <summary>
            Not implemented. Will always return 0.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.CurrentCallFrame">
            <summary>
            The currently executing call frame.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.CurrentScopeChain">
            <summary>
            The scope chain of the currently executing call frame.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugInformation.ReturnValue">
            <summary>
            The return value of the currently executing call frame.
            This is null if execution is not at a return point.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Debugger.DebugScope">
            <summary>
            Scope information, bindings, and values for a single scope in the scope chain
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugScope.ScopeType">
            <summary>
            The type of scope. Scope types are the same as defined by Chrome devtools protocol.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugScope.IsTopLevel">
            <summary>
            For <see cref="F:Jint.Runtime.Debugger.DebugScopeType.Block">block</see> scopes, indicates whether this scope is at the top level of a containing function.
            </summary>
            <remarks>
            Block scopes at the top level of a function are combined with Local scope in Chromium.
            This property facilitates implementing the same "flattening" in e.g. a UI. Because empty scopes are excluded in the scope chain,
            top level cannot be determined from the scope chain order alone.
            </remarks>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugScope.BindingNames">
            <summary>
            Names of all bindings in the scope.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Debugger.DebugScope.BindingObject">
            <summary>
            Binding object for ObjectEnvironmentRecords - that is, Global scope and With scope. Null for other scopes.
            </summary>
            <remarks>
            This is mainly useful as an optimization for devtools, allowing the BindingObject to be serialized directly rather than
            building a new transient object in response to e.g. Runtime.getProperties.
            </remarks>
        </member>
        <member name="M:Jint.Runtime.Debugger.DebugScope.GetBindingValue(System.String)">
            <summary>
            Retrieves the value of a specific binding. Note that some bindings (e.g. uninitialized let/const) may return null.
            </summary>
            <param name="name">Binding name</param>
            <returns>Value of the binding</returns>
        </member>
        <member name="M:Jint.Runtime.Debugger.DebugScope.SetBindingValue(System.String,Jint.Native.JsValue)">
            <summary>
            Sets the value of an existing binding.
            </summary>
            <param name="name">Binding name</param>
            <param name="value">New value of the binding</param>
        </member>
        <member name="T:Jint.Runtime.Debugger.DebugScopeType">
            <summary>
            Variable scope type.
            These mirror <see href="https://chromedevtools.github.io/devtools-protocol/tot/Debugger/#type-Scope">Chrome DevTools Protocol</see>.
            </summary>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Global">
            <summary>
            Global scope bindings.
            </summary>
            <remarks>
            A scope chain will only include one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Script">
            <summary>
            Block scope bindings (let/const) defined at top level.
            </summary>
            <remarks>
            A scope chain will only include one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Local">
            <summary>
            Function local bindings.
            </summary>
            <remarks>
            Function scoped variables.
            Note that variables in outer functions are in <see cref="F:Jint.Runtime.Debugger.DebugScopeType.Closure"/> scopes.
            A scope chain will only include one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Block">
            <summary>
            Block scoped bindings.
            </summary>
            <remarks>
            This scope is not used for block scoped variables (let/const) declared at the top level of the <see cref="F:Jint.Runtime.Debugger.DebugScopeType.Global">global</see> scope.
            Unlike Chromium V8, it *is* used as a separate scope for block scoped variables declared at the top level of a function.
            A scope chain may include more than one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Catch">
            <summary>
            Catch scope bindings.
            </summary>
            <remarks>
            This scope only includes the argument of a <c>catch</c> clause in a <c>try/catch</c> statement.
            A scope chain may include more than one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Closure">
            <summary>
            Function scope bindings in outer functions.
            </summary>
            <remarks>
            Unlike Chromium V8, which will optimize variables out that aren't referenced from the inner scope,
            Jint includes local variables from the outer function in this scope.
            A scope chain may include more than one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.With">
            <summary>
            With scope bindings.
            </summary>
            <remarks>
            Includes the bindings created from properties of object used as argument to a <c>with</c> statement.
            A scope chain may include more than one scope of this type.
            </remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Eval">
            <summary>
            Eval scope bindings.
            </summary>
            <remarks>Variables declared in an evaluated string. Not implemented.</remarks>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.Module">
            <summary>
            Module scope bindings.
            </summary>
        </member>
        <member name="F:Jint.Runtime.Debugger.DebugScopeType.WasmExpressionStack">
            <summary>
            WebAssembly expression stack bindings.
            </summary>
            <remarks>Not currently implemented by Jint.</remarks>
        </member>
        <member name="T:Jint.Runtime.Debugger.OptionalSourceBreakLocationEqualityComparer">
            <summary>
            Equality comparer for BreakLocation matching null Source to any other Source.
            </summary>
            <remarks>
            Equals returns true if all properties are equal - or if Source is null on either BreakLocation.
            GetHashCode excludes Source.
            </remarks>
        </member>
        <member name="M:Jint.Runtime.DefaultTimeSystem.TryParseLargeYear(System.String,System.Int64@)">
            <summary>
            Supports parsing of large (> 10 000) and negative years, should not be needed that often...
            </summary>
        </member>
        <member name="M:Jint.Runtime.Descriptors.PropertyDescriptor.ToPropertyDescriptor(Jint.Runtime.Realm,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-topropertydescriptor
            </summary>
        </member>
        <member name="M:Jint.Runtime.Descriptors.PropertyDescriptor.FromPropertyDescriptor(Jint.Engine,Jint.Runtime.Descriptors.PropertyDescriptor,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-frompropertydescriptor
            </summary>
        </member>
        <member name="M:Jint.Runtime.Descriptors.PropertyDescriptor.IsGenericDescriptor">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.10.3
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jint.Runtime.Environments.DeclarativeEnvironment">
            <summary>
            Represents a declarative environment record
            https://tc39.es/ecma262/#sec-declarative-environment-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.DeclarativeEnvironment.GetAllBindingNames">
            <inheritdoc />
        </member>
        <member name="T:Jint.Runtime.Environments.Environment">
            <summary>
            Base implementation of an Environment Record
            https://tc39.es/ecma262/#sec-environment-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.HasBinding(Jint.Key)">
            <summary>
            Determines if an environment record has a binding for an identifier.
            </summary>
            <param name="name">The identifier of the binding</param>
            <returns><c>true</c> if it does and <c>false</c> if it does not.</returns>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.CreateMutableBinding(Jint.Key,System.Boolean)">
            <summary>
            Creates a new mutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
            <param name="canBeDeleted"><c>true</c> if the binding may be subsequently deleted.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.CreateImmutableBinding(Jint.Key,System.Boolean)">
            <summary>
            Creates a new but uninitialized immutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
            <param name="strict"><c>false</c> if the binding may used before it's been initialized.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.InitializeBinding(Jint.Key,Jint.Native.JsValue)">
            <summary>
            Set the value of an already existing but uninitialized binding in an Environment Record.
            </summary>
            <param name="name">The text of the bound name</param>
            <param name="value">The value for the binding.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.SetMutableBinding(Jint.Key,Jint.Native.JsValue,System.Boolean)">
            <summary>
            Sets the value of an already existing mutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding</param>
            <param name="value">The value of the binding.</param>
            <param name="strict">The identify strict mode references.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.GetBindingValue(Jint.Key,System.Boolean)">
            <summary>
            Returns the value of an already existing binding from an environment record.
            </summary>
            <param name="name">The identifier of the binding</param>
            <param name="strict">The identify strict mode references.</param>
            <return>The value of an already existing binding from an environment record.</return>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.DeleteBinding(Jint.Key)">
            <summary>
            Delete a binding from an environment record. The String value N is the text of the bound name If a binding for N exists, remove the binding and return true. If the binding exists but cannot be removed return false. If the binding does not exist return true.
            </summary>
            <param name="name">The identifier of the binding</param>
            <returns><true>true</true> if the deletion is successfull.</returns>
        </member>
        <member name="M:Jint.Runtime.Environments.Environment.GetAllBindingNames">
            <summary>
            Returns an array of all the defined binding names
            </summary>
            <returns>The array of all defined bindings</returns>
        </member>
        <member name="T:Jint.Runtime.Environments.Environment.BindingName">
            <summary>
            Helper to cache JsString/Key when environments use different lookups.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ExecutionContext.GetThisEnvironment">
            <summary>
            https://tc39.es/ecma262/#sec-getthisenvironment
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.FunctionEnvironment">
            <summary>
            https://tc39.es/ecma262/#sec-function-environment-records
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.GlobalEnvironment">
            <summary>
            https://tc39.es/ecma262/#sec-global-environment-records
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.GlobalEnvironment.GlobalDeclarativeEnvironment">
            <summary>
            A sealed class for global usage.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.GlobalEnvironment.CreateMutableBinding(Jint.Key,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-global-environment-records-createmutablebinding-n-d
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.GlobalEnvironment.CreateImmutableBinding(Jint.Key,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-global-environment-records-createimmutablebinding-n-s
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.GlobalEnvironment.CreateGlobalFunctionBinding(Jint.Key,Jint.Native.JsValue,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-createglobalfunctionbinding
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.JintEnvironment.NewDeclarativeEnvironment(Jint.Engine,Jint.Runtime.Environments.Environment,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-newdeclarativeenvironment
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.JintEnvironment.NewFunctionEnvironment(Jint.Engine,Jint.Native.Function.Function,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-newfunctionenvironment
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.JintEnvironment.NewGlobalEnvironment(Jint.Engine,Jint.Native.Object.ObjectInstance,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-newglobalenvironment
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.JintEnvironment.NewObjectEnvironment(Jint.Engine,Jint.Native.Object.ObjectInstance,Jint.Runtime.Environments.Environment,System.Boolean,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-newobjectenvironment
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.JintEnvironment.NewPrivateEnvironment(Jint.Engine,Jint.Runtime.Environments.PrivateEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-newprivateenvironment
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.JintEnvironment.NewModuleEnvironment(Jint.Engine,Jint.Runtime.Environments.Environment)">
            <summary>
            https://tc39.es/ecma262/#sec-newmoduleenvironment
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.ModuleEnvironment">
            <summary>
            Represents a module environment record
            https://tc39.es/ecma262/#sec-module-environment-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ModuleEnvironment.GetThisBinding">
            <summary>
            https://tc39.es/ecma262/#sec-module-environment-records-getthisbinding
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ModuleEnvironment.CreateImportBinding(System.String,Jint.Runtime.Modules.Module,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-createimportbinding
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ModuleEnvironment.GetBindingValue(Jint.Key,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-module-environment-records-getbindingvalue-n-s
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ModuleEnvironment.HasThisBinding">
            <summary>
            https://tc39.es/ecma262/#sec-module-environment-records-hasthisbinding
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.ObjectEnvironment">
            <summary>
            Represents an object environment record
            https://tc39.es/ecma262/#sec-object-environment-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ObjectEnvironment.CreateMutableBinding(Jint.Key,System.Boolean)">
            <summary>
            http://www.ecma-international.org/ecma-262/6.0/#sec-object-environment-records-createmutablebinding-n-d
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ObjectEnvironment.CreateImmutableBinding(Jint.Key,System.Boolean)">
            <summary>
            https://tc39.es/ecma262/#sec-object-environment-records-createimmutablebinding-n-s
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ObjectEnvironment.InitializeBinding(Jint.Key,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-object-environment-records-initializebinding-n-v
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.PrivateEnvironment">
            <summary>
            https://tc39.es/ecma262/#sec-privateenvironment-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.PrivateEnvironment.ResolvePrivateIdentifier(System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-resolve-private-identifier
            </summary>
        </member>
        <member name="T:Jint.Runtime.ErrorDispatchInfo">
            <summary>
            Wraps known runtime type error information.
            </summary>
        </member>
        <member name="M:Jint.Runtime.ErrorDispatchInfo.#ctor(Jint.Native.Error.ErrorConstructor,System.String)">
            <summary>
            Wraps known runtime type error information.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.Initialize(Jint.Engine)">
            <summary>
            Initializes the host.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.InitializeHostDefinedRealm">
            <summary>
            https://tc39.es/ecma262/#sec-initializehostdefinedrealm
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.CreateRealm">
            <summary>
            https://tc39.es/ecma262/#sec-createrealm
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.CreateIntrinsics(Jint.Runtime.Realm)">
            <summary>
            https://tc39.es/ecma262/#sec-createintrinsics
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.EnsureCanCompileStrings(Jint.Runtime.Realm,Jint.Runtime.Realm)">
            <summary>
            https://tc39.es/ecma262/#sec-hostensurecancompilestrings
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.GetImportedModule(Jint.Runtime.IScriptOrModule,Jint.Runtime.Modules.ModuleRequest)">
            <summary>
            https://tc39.es/ecma262/#sec-GetImportedModule
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.LoadImportedModule(Jint.Runtime.IScriptOrModule,Jint.Runtime.Modules.ModuleRequest,Jint.Native.Promise.PromiseCapability)">
            <summary>
            https://tc39.es/ecma262/#sec-HostLoadImportedModule
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.FinishLoadingImportedModule(Jint.Runtime.IScriptOrModule,Jint.Runtime.Modules.ModuleRequest,Jint.Native.Promise.PromiseCapability,Jint.Native.JsPromise)">
            <summary>
            https://tc39.es/ecma262/#sec-FinishLoadingImportedModule
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.GetImportMetaProperties(Jint.Runtime.Modules.Module)">
            <summary>
            https://tc39.es/ecma262/#sec-hostgetimportmetaproperties
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.FinalizeImportMeta(Jint.Native.Object.ObjectInstance,Jint.Runtime.Modules.Module)">
            <summary>
            https://tc39.es/ecma262/#sec-hostfinalizeimportmeta
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.InitializeShadowRealm(Jint.Runtime.Realm)">
            <summary>
            https://tc39.es/proposal-shadowrealm/#sec-host-initialize-shadow-shadowrealm
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.MakeJobCallBack(Jint.Native.ICallable)">
            <summary>
            https://tc39.es/ecma262/#sec-hostmakejobcallback
            </summary>
        </member>
        <member name="M:Jint.Runtime.Host.HostEnqueuePromiseJob(System.Action,Jint.Runtime.Realm)">
            <summary>
            https://tc39.es/ecma262/#sec-hostenqueuepromisejob
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.ClrFunction">
            <summary>
            Wraps a CLR method into a JS function.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ClrHelper.ToString(Jint.Native.JsValue)">
            <summary>
            Call JsValue.ToString(), mainly for NamespaceReference.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ClrHelper.Unwrap(Jint.Runtime.Interop.ObjectWrapper)">
            <summary>
            Cast `obj as ISomeInterface` to `obj`
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ClrHelper.Wrap(Jint.Runtime.Interop.ObjectWrapper,Jint.Runtime.Interop.TypeReference)">
            <summary>
            Cast `obj` to `obj as ISomeInterface`
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ClrHelper.TypeOf(Jint.Runtime.Interop.ObjectWrapper)">
            <summary>
            Get `TypeReference(ISomeInterface)` from `obj as ISomeInterface`
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ClrHelper.TypeToObject(Jint.Runtime.Interop.TypeReference)">
            <summary>
            Cast `TypeReference(SomeClass)` to `ObjectWrapper(SomeClass)`
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ClrHelper.ObjectToType(Jint.Runtime.Interop.ObjectWrapper)">
            <summary>
            Cast `ObjectWrapper(SomeClass)` to `TypeReference(SomeClass)`
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.DelegateWrapper">
            <summary>
            Represents a FunctionInstance wrapper around a CLR method. This is used by user to pass
            custom methods to the engine.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.GetterFunction">
            <summary>
            Represents a FunctionInstance wrapping a CLR getter.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.InteropHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            resources:
            https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection
            https://stackoverflow.com/questions/74616/how-to-detect-if-type-is-another-generic-type/1075059#1075059
            https://docs.microsoft.com/en-us/dotnet/api/system.type.isconstructedgenerictype?view=net-6.0
            This can be improved upon - specifically as mentioned in the above MS document:
            GetGenericParameterConstraints()
            and array handling - i.e.
            GetElementType()
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.InteropHelper.CalculateMethodParameterScore(Jint.Engine,System.Reflection.ParameterInfo,Jint.Native.JsValue)">
            <summary>
            Determines how well parameter type matches target method's type.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.InteropHelper.CalculateMethodScore(Jint.Engine,Jint.Runtime.Interop.MethodDescriptor,Jint.Native.JsValue[])">
            <summary>
            Method's match score tells how far away it's from ideal candidate. 0 = ideal, bigger the the number,
            the farther away the candidate is from ideal match. Negative signals impossible match.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.IObjectConverter">
            <summary>
            When implemented, converts a CLR value to a <see cref="T:Jint.Native.JsValue"/> instance
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.IReferenceResolver">
            <summary>
            Reference resolver allows customizing behavior for reference resolving. This can be useful in cases where
            you want to ignore long chain of property accesses that might throw if anything is null or undefined.
            An example of such is <code>var a = obj.field.subField.value</code>. Custom resolver could accept chain to return
            null/undefined on first occurrence.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.IReferenceResolver.TryUnresolvableReference(Jint.Engine,Jint.Runtime.Reference,Jint.Native.JsValue@)">
            <summary>
            When unresolvable reference occurs, check if another value can be provided instead of it.
            </summary>
            <remarks>
            A reference error will be thrown if this method return false.
            </remarks>
            <param name="engine">The current engine instance.</param>
            <param name="reference">The reference that is being processed.</param>
            <param name="value">Value that should be used instead of undefined.</param>
            <returns>Whether to use <paramref name="value" /> instead of undefined.</returns>
        </member>
        <member name="M:Jint.Runtime.Interop.IReferenceResolver.TryPropertyReference(Jint.Engine,Jint.Runtime.Reference,Jint.Native.JsValue@)">
            <summary>
            When property reference is being processed, resolve to other value if needed.
            </summary>
            <param name="engine">The current engine instance.</param>
            <param name="reference">The reference that is being processed.</param>
            <param name="value">Value that should be used instead of reference target.</param>
            <returns>Whether to use <paramref name="value" /> instead of reference's value.</returns>
        </member>
        <member name="M:Jint.Runtime.Interop.IReferenceResolver.TryGetCallable(Jint.Engine,System.Object,Jint.Native.JsValue@)">
            <summary>
            When evaluating a function call and a target that is not an object is encountered,
            custom implementation can return a value to call.
            </summary>
            <remarks>
            A reference error will be thrown if this method return false.
            </remarks>
            <param name="engine">The current engine instance.</param>
            <param name="callee">The callee.</param>
            <param name="value">Value that should be used when this method return true. Should be <see cref="T:Jint.Native.ICallable"/>.</param>
            <returns>Whether to use <paramref name="value" /> instead of undefined.</returns>
        </member>
        <member name="M:Jint.Runtime.Interop.IReferenceResolver.CheckCoercible(Jint.Native.JsValue)">
            <summary>
            Check whether objects property value is valid.
            </summary>
            <param name="value">The value to check</param>
            <returns>Whether to accept the value.</returns>
        </member>
        <member name="T:Jint.Runtime.Interop.ITypeConverter">
            <summary>
            Handles conversions between CLR types.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ITypeConverter.Convert(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Converts value to to type. Throws exception if cannot be done.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ITypeConverter.TryConvert(System.Object,System.Type,System.IFormatProvider,System.Object@)">
            <summary>
            Converts value to to type. Returns false if cannot be done.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.MethodInfoFunction.ProcessParamsArrays(Jint.Native.JsValue[],Jint.Runtime.Interop.MethodDescriptor)">
            <summary>
            Reduces a flat list of parameters to a params array, if needed
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.NamespaceReference">
            <summary>
            Any instance on this class represents a reference to a CLR namespace.
            Accessing its properties will look for a class of the full name, or instantiate
            a new <see cref="T:Jint.Runtime.Interop.NamespaceReference"/> as it assumes that the property is a deeper
            level of the current namespace
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.NamespaceReference.GetType(System.Reflection.Assembly,System.String)">
             <summary>   Gets a type. </summary>
            <remarks>Nested type separators are converted to '.' instead of '+' </remarks>
             <param name="assembly"> The assembly. </param>
             <param name="typeName"> Name of the type. </param>
            
             <returns>   The type. </returns>
        </member>
        <member name="T:Jint.Runtime.Interop.ObjectWrapper">
            <summary>
            Wraps a CLR instance
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.ObjectWrapper.Create(Jint.Engine,System.Object,System.Type)">
            <summary>
            Creates a new object wrapper for given object instance and exposed type.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.Reflection.ExtensionMethodCache">
            <summary>
            A extension method lookup that can be shared between engines, build based on extension methods provided via options.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.Reflection.ReflectionAccessor">
            <summary>
            Strategy to read and write CLR object properties and fields.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.SetterFunction">
            <summary>
            Represents a FunctionInstance wrapping a CLR setter.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Interop.TypeDescriptor.IsIntegerIndexed">
            <summary>
            Is this read-write indexed.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Interop.TypeDescriptor.IntegerIndexerProperty">
            <summary>
            Read-write indexer.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.TypeResolver">
            <summary>
            Interop strategy for resolving types and members.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Interop.TypeResolver.MemberFilter">
            <summary>
            Registers a filter that determines whether given member is wrapped to interop or returned as undefined.
            By default allows all but will also be limited by <see cref="P:Jint.Options.InteropOptions.AllowGetType"/> configuration.
            </summary>
            <seealso cref="P:Jint.Options.InteropOptions.AllowGetType"/>
        </member>
        <member name="P:Jint.Runtime.Interop.TypeResolver.MemberNameCreator">
            <summary>
            Gives the exposed names for a member. Allows to expose C# convention following member like IsSelected
            as more JS idiomatic "selected" for example. Defaults to returning the <see cref="P:System.Reflection.MemberInfo.Name"/> as-is.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Interop.TypeResolver.MemberNameComparer">
            <summary>
            Sets member name comparison strategy when finding CLR objects members.
            By default member's first character casing is ignored and rest of the name is compared with strict equality.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.EvaluationContext">
            <summary>
            Per Engine.Evaluate() call context.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintArrowFunctionExpression.InstantiateArrowFunctionExpression(Jint.Engine,Jint.Runtime.Interpreter.JintFunctionDefinition,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiatearrowfunctionexpression
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintArrowFunctionExpression.InstantiateAsyncArrowFunctionExpression(Jint.Engine,Jint.Runtime.Interpreter.JintFunctionDefinition,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncarrowfunctionexpression
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintCallExpression.GetSuperConstructor(Jint.Runtime.Environments.FunctionEnvironment)">
            <summary>
            https://tc39.es/ecma262/#sec-getsuperconstructor
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintCallExpression.IsInTailPosition(Acornima.Ast.CallExpression)">
            <summary>
            https://tc39.es/ecma262/#sec-isintailposition
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Expressions.JintConstantExpression">
            <summary>
            Constant JsValue returning expression.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintExpression.GetValue(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            Resolves the underlying value for this expression.
            By default uses the Engine for resolving.
            </summary>
            <param name="context"></param>
            <seealso cref="T:Jint.Runtime.Interpreter.Expressions.JintLiteralExpression"/>
        </member>
        <member name="P:Jint.Runtime.Interpreter.Expressions.JintExpression.SourceText">
            <summary>
            If we'd get Esprima source, we would just refer to it, but this makes error messages easier to decipher.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintFunctionExpression.InstantiateOrdinaryFunctionExpression(Jint.Engine,Jint.Runtime.Interpreter.JintFunctionDefinition,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiateordinaryfunctionexpression
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintFunctionExpression.InstantiateAsyncFunctionExpression(Jint.Engine,Jint.Runtime.Interpreter.JintFunctionDefinition,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncfunctionexpression
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintFunctionExpression.InstantiateGeneratorFunctionExpression(Jint.Engine,Jint.Runtime.Interpreter.JintFunctionDefinition,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiategeneratorfunctionexpression
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintFunctionExpression.InstantiateAsyncGeneratorFunctionExpression(Jint.Engine,Jint.Runtime.Interpreter.JintFunctionDefinition,System.String)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintImportExpression.EvaluateInternal(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            https://tc39.es/proposal-import-attributes/#sec-evaluate-import-call
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Expressions.JintMemberExpression">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintMemberExpression.MakePrivateReference(Jint.Engine,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-makeprivatereference
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintMetaPropertyExpression.EvaluateInternal(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            https://tc39.es/ecma262/#sec-meta-properties
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Expressions.JintObjectExpression">
            <summary>
            https://tc39.es/ecma262/#sec-object-initializer
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintObjectExpression.BuildObjectFast(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            Version that can safely build plain object with only normal init/data fields fast.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintObjectExpression.BuildObjectNormal(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            https://tc39.es/ecma262/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintTaggedTemplateExpression.GetTemplateObject(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            https://www.ecma-international.org/ecma-262/6.0/#sec-gettemplateobject
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintYieldExpression.YieldDelegate(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-evaluation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintYieldExpression.AsyncGeneratorYield(System.Object)">
            <summary>
            https://tc39.es/ecma262/#sec-asyncgeneratoryield
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintYieldExpression.Await(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#await
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Expressions.JintYieldExpression.Yield(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-yield
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.JintFunctionDefinition">
            <summary>
            Works as memento for function execution. Optimization to cache things that don't change.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.JintFunctionDefinition.EvaluateBody(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.Function.Function,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-ordinarycallevaluatebody
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.JintFunctionDefinition.AsyncFunctionStart(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.Promise.PromiseCapability,System.Func{Jint.Runtime.Interpreter.EvaluationContext,Jint.Runtime.Completion})">
            <summary>
            https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.JintFunctionDefinition.AsyncBlockStart(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.Promise.PromiseCapability,System.Func{Jint.Runtime.Interpreter.EvaluationContext,Jint.Runtime.Completion},Jint.Runtime.Environments.ExecutionContext@)">
            <summary>
            https://tc39.es/ecma262/#sec-asyncblockstart
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.JintFunctionDefinition.EvaluateGeneratorBody(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.Function.Function,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-evaluategeneratorbody
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.JintStatementList.BlockDeclarationInstantiation(Jint.Runtime.Environments.Environment,System.Collections.Generic.List{Acornima.Ast.Declaration})">
            <summary>
            https://tc39.es/ecma262/#sec-blockdeclarationinstantiation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintBlockStatement.ExecuteBlock(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            Optimized for direct access without virtual dispatch.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintBreakStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.8
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintContinueStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.7
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintDoWhileStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.1
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintExportDefaultDeclaration.ExecuteInternal(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
             https://tc39.es/ecma262/#sec-exports-runtime-semantics-evaluation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintExportDefaultDeclaration.InitializeBoundName(System.String,Jint.Native.JsValue,Jint.Runtime.Environments.Environment)">
            <summary>
            https://tc39.es/ecma262/#sec-initializeboundname
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintExportNamedDeclaration.ExecuteInternal(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            https://tc39.es/ecma262/#sec-exports-runtime-semantics-evaluation
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintForInForOfStatement">
            <summary>
            https://tc39.es/ecma262/#sec-for-in-and-for-of-statements
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintForInForOfStatement.HeadEvaluation(Jint.Runtime.Interpreter.EvaluationContext,Jint.Native.Iterator.IteratorInstance@)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintForInForOfStatement.BodyEvaluation(Jint.Runtime.Interpreter.EvaluationContext,Jint.Runtime.Interpreter.Expressions.JintExpression,Jint.Runtime.Interpreter.Statements.ProbablyBlockStatement@,Jint.Native.Iterator.IteratorInstance,Jint.Runtime.Interpreter.Statements.JintForInForOfStatement.IterationKind,Jint.Runtime.Interpreter.Statements.JintForInForOfStatement.LhsKind,Jint.Runtime.Interpreter.Statements.JintForInForOfStatement.IteratorKind)">
            <summary>
            https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintForStatement">
            <summary>
            https://tc39.es/ecma262/#sec-forbodyevaluation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintForStatement.ForBodyEvaluation(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            https://tc39.es/ecma262/#sec-forbodyevaluation
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintReturnStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.9
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interpreter.Statements.JintStatement.Initialize(Jint.Runtime.Interpreter.EvaluationContext)">
            <summary>
            Opportunity to build one-time structures and caching based on lexical context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintSwitchStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.11
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintThrowStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.13
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintTryStatement">
            <summary>
            https://tc39.es/ecma262/#sec-try-statement
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintWhileStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.2
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.JintWithStatement">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.10
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interpreter.Statements.ProbablyBlockStatement">
            <summary>
            Helper to remove virtual dispatch from block statements when it's most common target.
            This is especially true for things like for statements body
            </summary>
        </member>
        <member name="T:Jint.Runtime.ITimeSystem">
            <summary>
            Date related operations that can replaced with implementation that can handle also full IANA data as recommended
            by the JS spec. Jint comes with <see cref="T:Jint.Runtime.DefaultTimeSystem"/> which is based on built-in data which might be incomplete.
            </summary>
            <remarks>
            This interface intentionally uses long instead of DateTime/DateTimeOffset as DateTime/DateTimeOffset cannot handle
            neither negative years nor the date range that JS can.
            </remarks>
        </member>
        <member name="M:Jint.Runtime.ITimeSystem.GetUtcNow">
            <summary>
            Retrieves current UTC time.
            </summary>
            <returns>Current UTC time.</returns>
        </member>
        <member name="P:Jint.Runtime.ITimeSystem.DefaultTimeZone">
            <summary>
            Return the default time zone system is using. Usually <see cref="P:System.TimeZoneInfo.Local"/>, but can be altered via
            engine configuration, see <see cref="P:Jint.Options.TimeZone"/>.
            </summary>
        </member>
        <member name="M:Jint.Runtime.ITimeSystem.TryParse(System.String,System.Int64@)">
            <summary>
            Tries to parse given time presentation string as JS date presentation based on epoch.
            </summary>
            <param name="date">Date/time to parse.</param>
            <param name="epochMilliseconds">The milliseconds since the UNIX epoch, can be negative for values before 1970.</param>
            <returns>true, if succeeded.</returns>
        </member>
        <member name="M:Jint.Runtime.ITimeSystem.GetUtcOffset(System.Int64)">
            <summary>
            Retrieves UTC offset for given date presented as milliseconds since the Unix epoch.
            Defaults to using <see cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)"/> using the configured time zone.
            </summary>
            <param name="epochMilliseconds">Date as milliseconds since the Unix epoch, may be negative (for instants before the epoch).</param>
            <seealso cref="T:System.TimeZone"/>
        </member>
        <member name="P:Jint.Runtime.JavaScriptException.JavaScriptErrorWrapperException.StackTrace">
            <summary>
            Returns the call stack of the JavaScript exception.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.BuilderModule">
            <summary>
            This is a custom ModuleRecord implementation for dynamically built modules using <see cref="T:Jint.Runtime.Modules.ModuleBuilder"/>
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.CyclicModule">
            <summary>
            https://tc39.es/ecma262/#sec-cyclic-module-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.Link">
            <summary>
            https://tc39.es/ecma262/#sec-moduledeclarationlinking
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.Evaluate">
            <summary>
            https://tc39.es/ecma262/#sec-moduleevaluation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.InnerModuleLinking(System.Collections.Generic.Stack{Jint.Runtime.Modules.CyclicModule},System.Int32)">
            <summary>
            https://tc39.es/ecma262/#sec-InnerModuleLinking
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.InnerModuleEvaluation(System.Collections.Generic.Stack{Jint.Runtime.Modules.CyclicModule},System.Int32,System.Int32@)">
            <summary>
            https://tc39.es/ecma262/#sec-innermoduleevaluation
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.ExecuteAsyncModule">
            <summary>
            https://tc39.es/ecma262/#sec-execute-async-module
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.AsyncModuleExecutionFulfilled(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-async-module-execution-fulfilled
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.AsyncModuleExecutionRejected(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            https://tc39.es/ecma262/#sec-async-module-execution-rejected
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.GatherAvailableAncestors(System.Collections.Generic.List{Jint.Runtime.Modules.CyclicModule})">
            <summary>
            https://tc39.es/ecma262/#sec-gather-available-ancestors
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.CyclicModule.InitializeEnvironment">
            <summary>
            https://tc39.es/ecma262/#table-cyclic-module-methods
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.IModuleLoader">
            <summary>
            Module loader interface that allows defining how module loadings requests are handled.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.IModuleLoader.Resolve(System.String,Jint.Runtime.Modules.ModuleRequest)">
            <summary>
            Resolves a specifier to a path or module
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.IModuleLoader.LoadModule(Jint.Engine,Jint.Runtime.Modules.ResolvedSpecifier)">
            <summary>
            Loads a module from given location.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.Module">
            <summary>
            https://tc39.es/ecma262/#sec-abstract-module-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.Module.GetModuleNamespace(Jint.Runtime.Modules.Module)">
            <summary>
            https://tc39.es/ecma262/#sec-getmodulenamespace
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.Module.CreateModuleNamespace(Jint.Runtime.Modules.Module,System.Collections.Generic.List{System.String})">
            <summary>
            https://tc39.es/ecma262/#sec-modulenamespacecreate
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.ModuleFactory">
            <summary>
            Factory which creates a single runtime <see cref="T:Jint.Runtime.Modules.Module"/> from a given source.
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleFactory.BuildSourceTextModule(Jint.Engine,Jint.Runtime.Modules.ResolvedSpecifier,System.String,Jint.ModuleParsingOptions)">
            <summary>
            Creates a <see cref="T:Jint.Runtime.Modules.Module"/> for the usage within the given <paramref name="engine"/>
            from the provided javascript <paramref name="code"/>.
            </summary>
            <remarks>
            The returned modules location (see <see cref="P:Jint.Runtime.Modules.Module.Location"/>) points to
            <see cref="P:System.Uri.LocalPath"/> if <see cref="P:Jint.Runtime.Modules.ResolvedSpecifier.Uri"/> is not null. If
            <see cref="P:Jint.Runtime.Modules.ResolvedSpecifier.Uri"/> is null, the modules location source will be null as well.
            </remarks>
            <exception cref="T:Acornima.ParseErrorException">Is thrown if the provided <paramref name="code"/> can not be parsed.</exception>
            <exception cref="T:Jint.Runtime.JavaScriptException">Is thrown if an error occured when parsing <paramref name="code"/>.</exception>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleFactory.BuildSourceTextModule(Jint.Engine,Jint.Prepared{Acornima.Ast.Module}@)">
            <summary>
            Creates a <see cref="T:Jint.Runtime.Modules.Module"/> for the usage within the given <paramref name="engine"/>
            from the parsed <paramref name="preparedModule"/>.
            </summary>
            <remarks>
            The returned modules location (see <see cref="P:Jint.Runtime.Modules.Module.Location"/>) will be set
            to <see cref="F:Acornima.SourceLocation.SourceFile"/> of the <paramref name="preparedModule"/>.
            </remarks>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleFactory.BuildJsonModule(Jint.Engine,Jint.Runtime.Modules.ResolvedSpecifier,System.String)">
            <summary>
            Creates a <see cref="T:Jint.Runtime.Modules.Module"/> for the usage within the given <paramref name="engine"/> for the
            provided JSON module <paramref name="jsonString"/>.
            </summary>
            <remarks>
            The returned modules location (see <see cref="P:Jint.Runtime.Modules.Module.Location"/>) points to
            <see cref="P:System.Uri.LocalPath"/> if <see cref="P:Jint.Runtime.Modules.ResolvedSpecifier.Uri"/> is not null. If
            <see cref="P:Jint.Runtime.Modules.ResolvedSpecifier.Uri"/> is null, the modules location source will be null as well.
            </remarks>
            <exception cref="T:Jint.Runtime.JavaScriptException">Is thrown if an error occured when parsing <paramref name="jsonString"/>.</exception>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleFactory.BuildJsonModule(Jint.Engine,Jint.Native.JsValue,System.String)">
            <summary>
            Creates a <see cref="T:Jint.Runtime.Modules.Module"/> for the usage within the given <paramref name="engine"/>
            from the parsed JSON provided in <paramref name="parsedJson"/>.
            </summary>
            <remarks>
            The returned modules location (see <see cref="P:Jint.Runtime.Modules.Module.Location"/>) will be set
            to <paramref name="location"/>.
            </remarks>
        </member>
        <member name="T:Jint.Runtime.Modules.ModuleLoader">
            <summary>
            Base template for module loaders.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.ModuleNamespace">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.GetPrototypeOf">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-getprototypeof
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.SetPrototypeOf(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-setprototypeof-v
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.SetImmutablePrototype(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-set-immutable-prototype
            </summary>
        </member>
        <member name="P:Jint.Runtime.Modules.ModuleNamespace.Extensible">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-isextensible
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.PreventExtensions">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-preventextensions
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.GetOwnProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-getownproperty-p
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.DefineOwnProperty(Jint.Native.JsValue,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-defineownproperty-p-desc
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.HasProperty(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-hasproperty-p
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.Get(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-get-p-receiver
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.Set(Jint.Native.JsValue,Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-set-p-v-receiver
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.Delete(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-delete-p
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleNamespace.GetOwnPropertyKeys(Jint.Runtime.Types)">
            <summary>
            https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-ownpropertykeys
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleRequest.Equals(Jint.Runtime.Modules.ModuleRequest)">
            <summary>
            https://tc39.es/proposal-import-attributes/#sec-ModuleRequestsEqual
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ModuleRequestExtensions.IsJsonModule(Jint.Runtime.Modules.ModuleRequest)">
            <summary>
            Returns true if the provided <paramref name="request"/>
            is a json module, otherwise false.
            </summary>
            <example>
            The following JavaScript import statement imports a JSON module
            for which this method would return true.
            <code>
            import value from 'config.json' with { type: 'json' }
            </code>
            </example>
        </member>
        <member name="T:Jint.Runtime.Modules.ImportEntry">
            <summary>
            https://tc39.es/ecma262/#importentry-record
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ImportEntry.#ctor(Jint.Runtime.Modules.ModuleRequest,System.String,System.String)">
            <summary>
            https://tc39.es/ecma262/#importentry-record
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.ExportEntry">
            <summary>
            https://tc39.es/ecma262/#exportentry-record
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.ExportEntry.#ctor(System.String,System.Nullable{Jint.Runtime.Modules.ModuleRequest},System.String,System.String)">
            <summary>
            https://tc39.es/ecma262/#exportentry-record
            </summary>
        </member>
        <member name="T:Jint.Runtime.Modules.SourceTextModule">
            <summary>
            https://tc39.es/ecma262/#sec-source-text-module-records
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.SourceTextModule.GetExportedNames(System.Collections.Generic.List{Jint.Runtime.Modules.CyclicModule})">
            <summary>
            https://tc39.es/ecma262/#sec-getexportednames
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.SourceTextModule.ResolveExport(System.String,System.Collections.Generic.List{Jint.Runtime.Modules.ExportResolveSetItem})">
            <summary>
            https://tc39.es/ecma262/#sec-resolveexport
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.SourceTextModule.InitializeEnvironment">
            <summary>
            https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment
            </summary>
        </member>
        <member name="M:Jint.Runtime.Modules.SourceTextModule.ExecuteModule(Jint.Native.Promise.PromiseCapability)">
            <summary>
            https://tc39.es/ecma262/#sec-source-text-module-record-execute-module
            </summary>
        </member>
        <member name="T:Jint.Runtime.OrderedDictionary`2">
            <summary>
            Represents a dictionary that tracks the order that items were added.
            </summary>
            <typeparam name="TKey">The type of the dictionary keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary values.</typeparam>
            <remarks>
            This dictionary makes it possible to get the index of a key and a key based on an index.
            It can be costly to find the index of a key because it must be searched for linearly.
            It can be costly to insert a key/value pair because other key's indexes must be adjusted.
            It can be costly to remove a key/value pair because other keys' indexes must be adjusted.
            </remarks>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
            <param name="capacity">The initial capacity of the dictionary.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is less than zero.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
            <param name="comparer">The equality comparer to use to compare keys.</param>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
            <param name="capacity">The initial capacity of the dictionary.</param>
            <param name="comparer">The equality comparer to use to compare keys.</param>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the given key/value pair to the dictionary.
            </summary>
            <param name="key">The key to add to the dictionary.</param>
            <param name="value">The value to associated with the key.</param>
            <exception cref="T:System.ArgumentException">The given key already exists in the dictionary.</exception>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts the given key/value pair at the specified index.
            </summary>
            <param name="index">The index to insert the key/value pair.</param>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <exception cref="T:System.ArgumentException">The given key already exists in the dictionary.</exception>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- larger than the size of the dictionary.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the given key exists in the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>True if the key exists in the dictionary; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the given index.
            </summary>
            <param name="index">The index of the key to get.</param>
            <returns>The key at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- larger than the number of keys.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of the given key.
            </summary>
            <param name="key">The key to get the index of.</param>
            <returns>The index of the key in the dictionary -or- -1 if the key is not found.</returns>
            <remarks>The operation runs in O(n).</remarks>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.Keys">
            <summary>
            Gets the keys in the dictionary in the order they were added.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the key/value pair with the given key from the dictionary.
            </summary>
            <param name="key">The key of the pair to remove.</param>
            <returns>True if the key was found and the pair removed; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <remarks>This operation runs in O(n).</remarks>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the key/value pair at the given index.
            </summary>
            <param name="index">The index of the key/value pair to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- larger than the size of the dictionary.</exception>
            <remarks>This operation runs in O(n).</remarks>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the given key. If the key is not found,
            default(TValue) value is stored in the value.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">The value used to hold the results.</param>
            <returns>True if the key was found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.Values">
            <summary>
            Gets the values in the dictionary.
            </summary>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the given index.
            </summary>
            <param name="index">The index of the value to get.</param>
            <returns>The value at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the length of the dictionary.</exception>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the given key.
            </summary>
            <param name="key">The key to get the associated value by or to associate with the value.</param>
            <returns>The value associated with the given key.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key is not in the dictionary.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.Clear">
            <summary>
            Removes all key/value pairs from the dictionary.
            </summary>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs in the dictionary.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.GetEnumerator">
            <summary>
            Gets the key/value pairs in the dictionary in the order they were added.
            </summary>
            <returns>An enumerator over the key/value pairs in the dictionary.</returns>
        </member>
        <member name="T:Jint.Runtime.OrderedDictionary`2.KeyCollection">
            <summary>
            Wraps the keys in an OrderDictionary.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.KeyCollection.#ctor(Jint.Runtime.OrderedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of a KeyCollection.
            </summary>
            <param name="dictionary">The OrderedDictionary whose keys to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the keys from the OrderedDictionary to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the keys to.</param>
            <param name="arrayIndex">The index into the array to start copying the keys.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The arrayIndex is negative.</exception>
            <exception cref="T:System.ArgumentException">The array, starting at the given index, is not large enough to contain all the keys.</exception>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the number of keys in the OrderedDictionary.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the keys in the OrderedDictionary.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Jint.Runtime.OrderedDictionary`2.ValueCollection">
            <summary>
            Wraps the keys in an OrderDictionary.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.ValueCollection.#ctor(Jint.Runtime.OrderedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of a ValueCollection.
            </summary>
            <param name="dictionary">The OrderedDictionary whose keys to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the values from the OrderedDictionary to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the values to.</param>
            <param name="arrayIndex">The index into the array to start copying the values.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The arrayIndex is negative.</exception>
            <exception cref="T:System.ArgumentException">The array, starting at the given index, is not large enough to contain all the values.</exception>
        </member>
        <member name="P:Jint.Runtime.OrderedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the number of values in the OrderedDictionary.
            </summary>
        </member>
        <member name="M:Jint.Runtime.OrderedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the values in the OrderedDictionary.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Jint.Runtime.RangeErrorException">
            <summary>
            Workaround for situation where engine is not easily accessible.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Realm.Intrinsics">
            <summary>
            The intrinsic values used by code associated with this realm.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Realm.GlobalObject">
            <summary>
            The global object for this realm.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Realm.GlobalEnv">
            <summary>
            The global environment for this realm.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Realm.HostDefined">
            <summary>
            Field reserved for use by hosts that need to associate additional information with a Realm Record.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Reference">
            <summary>
            https://tc39.es/ecma262/#sec-reference-record-specification-type
            </summary>
        </member>
        <member name="P:Jint.Runtime.Reference.Base">
            <summary>
            The value or Environment Record which holds the binding. A [[Base]] of unresolvable indicates that the binding could not be resolved.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Reference.ReferencedName">
            <summary>
            The value or Environment Record which holds the binding. A [[Base]] of unresolvable indicates that the binding could not be resolved.
            </summary>
        </member>
        <member name="P:Jint.Runtime.Reference.Strict">
            <summary>
            true if the Reference Record originated in strict mode code, false otherwise.
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToPrimitive(Jint.Native.JsValue,Jint.Runtime.Types)">
            <summary>
            https://tc39.es/ecma262/#sec-toprimitive
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.OrdinaryToPrimitive(Jint.Native.Object.ObjectInstance,Jint.Runtime.Types)">
            <summary>
            https://tc39.es/ecma262/#sec-ordinarytoprimitive
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToBoolean(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-toboolean
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToNumeric(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tonumeric
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToNumber(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tonumber
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToLength(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tolength
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToIntegerOrInfinity(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tointegerorinfinity
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInteger(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tointeger
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInteger(System.Double)">
            <summary>
            https://tc39.es/ecma262/#sec-tointeger
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInt32(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.5
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToUint32(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-touint32
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToUint16(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-touint16
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInt16(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-toint16
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInt8(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-toint8
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToUint8(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-touint8
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToUint8Clamp(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-touint8clamp
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToBigInt(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tobigint
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToBigInt64(System.Numerics.BigInteger)">
            <summary>
            https://tc39.es/ecma262/#sec-tobigint64
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToBigUint64(System.Numerics.BigInteger)">
            <summary>
            https://tc39.es/ecma262/#sec-tobiguint64
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.BigIntegerModulo(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Implements the JS spec modulo operation as expected.
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.CanonicalNumericIndexString(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-canonicalnumericindexstring
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToIndex(Jint.Runtime.Realm,Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-toindex
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.CanBeStringifiedAsLong(System.Double)">
            <summary>
            Returns true if <see cref="M:Jint.Runtime.TypeConverter.ToString(System.Int64)"/> can be used for the
            provided value <paramref name="d"/>, otherwise false.
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToPropertyKey(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/6.0/#sec-topropertykey
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToString(Jint.Native.JsValue)">
            <summary>
            https://tc39.es/ecma262/#sec-tostring
            </summary>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.IsIntegralNumber(System.Double)">
            <summary>
            https://tc39.es/ecma262/#sec-isintegralnumber
            </summary>
        </member>
        <member name="T:Jint.Runtime.TypeErrorException">
            <summary>
            Workaround for situation where engine is not easily accessible.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference">
            <summary>
            Get a pinnable reference to the builder.
            Does not ensure there is a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/>
            This overload is pattern matched in the C# 7.3+ compiler so you can omit
            the explicit method call, and write eg "fixed (char* c = builder)"
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference(System.Boolean)">
            <summary>
            Get a pinnable reference to the builder.
            </summary>
            <param name="terminate">Ensures that the builder has a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/></param>
        </member>
        <member name="P:System.Text.ValueStringBuilder.RawChars">
            <summary>Returns the underlying storage of the builder.</summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AsSpan(System.Boolean)">
            <summary>
            Returns a span around the contents of the builder.
            </summary>
            <param name="terminate">Ensures that the builder has a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/></param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Grow(System.Int32)">
            <summary>
            Resize the internal buffer either by doubling current buffer size or
            by adding <paramref name="additionalCapacityBeyondPos"/> to
            <see cref="F:System.Text.ValueStringBuilder._pos"/> whichever is greater.
            </summary>
            <param name="additionalCapacityBeyondPos">
            Number of chars requested beyond current position.
            </param>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.UnsafeAccessorAttribute">
             <summary>
             Provides access to an inaccessible member of a specific type.
             </summary>
             <remarks>
             This attribute may be applied to an <code>extern static</code> method.
             The implementation of the <code>extern static</code> method annotated with
             this attribute will be provided by the runtime based on the information in
             the attribute and the signature of the method that the attribute is applied to.
             The runtime will try to find the matching method or field and forward the call
             to it. If the matching method or field is not found, the body of the <code>extern</code>
             method will throw <see cref="T:System.MissingFieldException" /> or <see cref="T:System.MissingMethodException" />.
             Only the specific type defined will be examined for inaccessible members. The type hierarchy
             is not walked looking for a match.
            
             For <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Method"/>,
             <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticMethod"/>,
             <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Field"/>,
             and <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticField"/>, the type of
             the first argument of the annotated <code>extern</code> method identifies the owning type.
             The value of the first argument is treated as <code>this</code> pointer for instance fields and methods.
             The first argument must be passed as <code>ref</code> for instance fields and methods on structs.
             The value of the first argument is not used by the implementation for <code>static</code> fields and methods.
            
             Return type is considered for the signature match. modreqs and modopts are initially not considered for
             the signature match. However, if an ambiguity exists ignoring modreqs and modopts, a precise match
             is attempted. If an ambiguity still exists <see cref="T:System.Reflection.AmbiguousMatchException" /> is thrown.
            
             By default, the attributed method's name dictates the name of the method/field. This can cause confusion
             in some cases since language abstractions, like C# local functions, generate mangled IL names. The
             solution to this is to use the <code>nameof</code> mechanism and define the <see cref="P:System.Runtime.CompilerServices.UnsafeAccessorAttribute.Name"/> property.
            
             <code>
             public void Method(Class c)
             {
                 PrivateMethod(c);
            
                 [UnsafeAccessor(UnsafeAccessorKind.Method, Name = nameof(PrivateMethod))]
                 extern static void PrivateMethod(Class c);
             }
             </code>
             </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.UnsafeAccessorAttribute.#ctor(System.Runtime.CompilerServices.UnsafeAccessorKind)">
            <summary>
            Instantiates an <see cref="T:System.Runtime.CompilerServices.UnsafeAccessorAttribute"/>
            providing access to a member of kind <see cref="T:System.Runtime.CompilerServices.UnsafeAccessorKind"/>.
            </summary>
            <param name="kind">The kind of the target to which access is provided.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.UnsafeAccessorAttribute.Kind">
            <summary>
            Gets the kind of member to which access is provided.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.UnsafeAccessorAttribute.Name">
            <summary>
            Gets or sets the name of the member to which access is provided.
            </summary>
            <remarks>
            The name defaults to the annotated method name if not specified.
            The name must be unset/<code>null</code> for <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Constructor"/>.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.UnsafeAccessorKind">
            <summary>
            Specifies the kind of target to which an <see cref="T:System.Runtime.CompilerServices.UnsafeAccessorAttribute" /> is providing access.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Constructor">
            <summary>
            Provide access to a constructor.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Method">
            <summary>
            Provide access to a method.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticMethod">
            <summary>
            Provide access to a static method.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Field">
            <summary>
            Provide access to a field.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticField">
            <summary>
            Provide access to a static field.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices2.InlineArrayAttribute">
            <summary>
            Indicates that the instance's storage is sequentially replicated "length" times.
            </summary>
            <remarks>
            <para>
            This attribute can be used to annotate a <see langword="struct"/> type with a single field.
            The runtime will replicate that field in the actual type layout as many times as is specified.
            </para>
            <para>
            Here's an example of how an inline array type with 8 <see cref="T:System.Single"/> values can be declared:
            <code lang="csharp">
            [InlineArray(8)]
            struct Float8InlineArray
            {
                private float _value;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices2.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:System.Runtime.CompilerServices2.InlineArrayAttribute"/> instance with the specified length.</summary>
            <param name="length">The number of sequential fields to replicate in the inline array type.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices2.InlineArrayAttribute.Length">
            <summary>Gets the number of sequential fields to replicate in the inline array type.</summary>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
             <summary>
             An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
             </summary>
             <example>
             Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function
             that reads some global memory and returns the value. In this case, the GC transition overhead is significantly
             more than the memory read.
             <code>
             using System;
             using System.Runtime.InteropServices;
             class Program
             {
                 [DllImport("Kernel32")]
                 [SuppressGCTransition]
                 static extern int GetTickCount();
                 static void Main()
                 {
                     Console.WriteLine($"{GetTickCount()}");
                 }
             }
             </code>
             </example>
             <remarks>
             This attribute is ignored if applied to a method without the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            
             Forgoing this transition can yield benefits when the cost of the transition is more than the execution time
             of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime
             provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the
             GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at
             https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/clr-code-guide.md#2.1.8.
             Suppressing the GC transition is an advanced scenario and should not be done without fully understanding
             potential consequences.
            
             One of these consequences is an impact to Mixed-mode debugging (https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
             During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that
             has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
             In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example
             stepping through the native code or diagnosing an exception thrown from the native code.
            
             The runtime may load the native library for method marked with this attribute in advance before the method is called for the first time.
             Usage of this attribute is not recommended for platform neutral libraries with conditional platform specific code.
            
             The P/Invoke method that this attribute is applied to must have all of the following properties:
               * Native function always executes for a trivial amount of time (less than 1 microsecond).
               * Native function does not perform a blocking syscall (e.g. any type of I/O).
               * Native function does not call back into the runtime (e.g. Reverse P/Invoke).
               * Native function does not throw exceptions.
               * Native function does not manipulate locks or other concurrency primitives.
            
             Consequences of invalid uses of this attribute:
               * GC starvation.
               * Immediate runtime termination.
               * Data corruption.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
            <remarks>
            Methods marked with this attribute have the following restrictions:
              * Method must be marked "static".
              * Must not be called from managed code.
              * Must only have <see href="https://docs.microsoft.com/dotnet/framework/interop/blittable-and-non-blittable-types">blittable</see> arguments.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
            <remarks>
            Supplied types must be from the official "System.Runtime.CompilerServices" namespace and
            be of the form "CallConvXXX".
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
            Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
            <param name="message">
            A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
            Gets an optional message that contains information about the need for
            assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the member,
            why it requires assembly files to be on disk, and what options a consumer has
            to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceHiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StackTraceHiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
    </members>
</doc>
